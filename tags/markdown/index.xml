<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>markdown on Korean-man in Tokyo</title><link>https://retheviper.github.io/tags/markdown/</link><description>Recent content in markdown on Korean-man in Tokyo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://retheviper.github.io/tags/markdown/index.xml" rel="self" type="application/rss+xml"/><item><title>静的ウェブページに興味を持つ</title><link>https://retheviper.github.io/posts/static-web-page/</link><pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/static-web-page/</guid><description>&lt;img src="https://retheviper.github.io/images/tools.jpg" alt="Featured image of post 静的ウェブページに興味を持つ" />&lt;p>今更な話ですが、主にバックエンドの仕事をしてきたエンジニアとしては(特に、Springが全てを占拠してしまったJavaがメインな立場からは)、昨今のフロントエンドの世界を見ていると、一瞬よそ見しただけでもすぐに時代遅れな人間になってしまうような気になります。それだけさまざまなライブラリ、フレームワーク、設計思想、プラットフォームが現れ消えていくので、これからどれを学んでおくべきかわからなくなります。&lt;/p>
&lt;p>例えばアプリの設計思想だと、SPA&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>がトレンドになっているものの、&lt;a class="link" href="https://webassembly.org" target="_blank" rel="noopener"
>WASM&lt;/a>の登場でPWA&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>も登場し始めています。JavaScriptのフレームワークでは、「Virtual DOMを使用するので早い」という、&lt;a class="link" href="https://angular.io" target="_blank" rel="noopener"
>Angular&lt;/a>・&lt;a class="link" href="https://reactjs.org" target="_blank" rel="noopener"
>React&lt;/a>・&lt;a class="link" href="https://vuejs.org" target="_blank" rel="noopener"
>Vue.js&lt;/a>が今の通称「3強」となっていますが、「DOMを直接更新するから早い」という&lt;a class="link" href="https://svelte.dev" target="_blank" rel="noopener"
>Svelte&lt;/a>もあります。&lt;a class="link" href="https://nodejs.org" target="_blank" rel="noopener"
>Node.js&lt;/a>は失敗したという&lt;a class="link" href="https://deno.land" target="_blank" rel="noopener"
>Deno&lt;/a>が登場しているし、今の&lt;a class="link" href="https://www.typescriptlang.org" target="_blank" rel="noopener"
>TypeScript&lt;/a>の位置を目指したが失敗したと思われた&lt;a class="link" href="https://dart.dev" target="_blank" rel="noopener"
>Dart&lt;/a>は、&lt;a class="link" href="https://flutter.dev" target="_blank" rel="noopener"
>Flutter&lt;/a>や&lt;a class="link" href="https://fuchsia.dev" target="_blank" rel="noopener"
>Fuchsia&lt;/a>で再起できているようにも見えますね。&lt;/p>
&lt;p>このように、フロントエンド系は新しい概念と技術の氾濫で混乱な状況ですが、面白くも、トレンドと逆行するような形のWebアプリ、いや、Webサイトの構築に関する概念もそれなりの割合を示しているように見えます。本日のポストのテーマである、「静的ウェブページ」です。&lt;/p>
&lt;h2 id="静的ウェブページstatic-web-pageとは">静的ウェブページ(Static Web Page)とは&lt;/h2>
&lt;p>「静的」であるということは、「動的」と区分される特徴があるということでしょう。ここでいう動的か静的かというのは、入力によって何かの処理が行われるか、もしくは常にサーバに保存されたデータをそのまま返すかががもっとも重要な基準となっているようです。例えばWikipediaでは以下のように定義しています。&lt;/p>
&lt;blockquote>
&lt;p>A static web page (sometimes called a flat page or a stationary page) is a web page that is delivered to the user&amp;rsquo;s web browser exactly as stored, in contrast to dynamic web pages which are generated by a web application.&lt;/p>
&lt;/blockquote>
&lt;p>言い方を変えると、サイトが「アプリケーション」として作られたものならば動的、もしくはただの固定されたデータを表示するための「ページ」であるなら静的といえますね。&lt;/p>
&lt;h2 id="なぜ今更">なぜ今更？&lt;/h2>
&lt;p>サーバに保存されたデータをそのまま返すという概念は、 Webアプリケーションが登場する前から存在していました。当時のウェブサイトはhtmlとcss、イメージなどのリソースをFTPなどでサーバにアップロードしてホスティングを行っていたのですが、これは今の静的ウェブページにとっても同じ方式です。&lt;/p>
&lt;p>つまり、概念だけを見ると静的ウェブページは昔に流行っていた「ホームページ」や「ブログ」などに近いものです。時代に逆行するような、静的ウェブページが今更注目されるのは、なぜか。&lt;/p>
&lt;p>当たり前ながら、当時とは違って、JavaScriptの発展によりサーバに依存しなくても簡単な処理はブラウザでできるようにもなり、適切なAPIがあればバックエンドを実装する必要がなくなるのもあり、AWS LambdaやAzure Functionsのようなサービスによりサーバレスができる環境ができるなど、バックエンドよりはフロントエンドの目的によって選択できる方法が多くなったという点があるでしょう。&lt;/p>
&lt;p>そして、もっとも根本的な、サイトの目的がありますね。ブログ、ポートフォリオ、イベント案内などそもそも「大した処理が必要ない」サイトに関しては、静的にしたほうがリソース使用、費用、パフォーマンス、セキュリティという面で動的ウェブページより有利です。例えば今このブログみたいにですね。&lt;/p>
&lt;p>最近はMarkdownなどで文書を書くと、それを元に静的ウェブページを作成してくれるツールもたくさんあり、そのようなツールで生成したデータを載せるだけでホスティングする方法も多いです。自分でソースを管理できて、簡単にホスティングできるのである意味ではもっとも静的ウェブページを作り安い時代となったとも言えますね。&lt;/p>
&lt;h2 id="静的ウェブページを作られるツール">静的ウェブページを作られるツール&lt;/h2>
&lt;p>多くの場合、静的ウェブサイトの生成ツールの使用は難しくありません。ベースになっている言語の実行環境を構築して、テンプレートをダウンロードして適用するか、作っていくかなのですが、ツールを実行するための環境の構築はツールのホームページの手順通りでよく、テンプレートも人の作っておいたものを持ってきて少し修正するくらいです。簡単な修正なら、HTML、CSS、JSON、YAMLくらいのファイルをいじるだけなので(プロパティファイルで色々なオプションを選択できる例もあります)、難しくありません。あとはMarkdownなどで記事を書いていくだけですねß。&lt;/p>
&lt;p>ただ、自分の経験からだと、既製のテンプレートを大きく変えるか、最初から作り直す場合は自分が触ることのできる言語をベースにしておいた方が良いということですね。例えばこのブログは&lt;a class="link" href="https://jekyllrb.com" target="_blank" rel="noopener"
>Jekyll&lt;/a>で作られていて、テンプレートも一部修正していますが、そもそも私はRubyに慣れてないので根本的な部分を修正してはいないところです。&lt;/p>
&lt;p>Jekyll以外には、Nodejs基盤のツールが多いようです。例えば&lt;a class="link" href="https://metalsmith.io" target="_blank" rel="noopener"
>Metalsmith&lt;/a>や、&lt;a class="link" href="https://hexo.io" target="_blank" rel="noopener"
>Hexo&lt;/a>のような物があって、React基盤の&lt;a class="link" href="https://www.gatsbyjs.com" target="_blank" rel="noopener"
>Gatsby&lt;/a>、Vue.js基盤の&lt;a class="link" href="https://vuepress.vuejs.org" target="_blank" rel="noopener"
>VuePress&lt;/a>もあります。JavaScriptとそのフレームワークの使用に慣れているなら、こちらがいいかも知れませんね。他には、Go言語基盤の&lt;a class="link" href="https://gohugo.io" target="_blank" rel="noopener"
>Hugo&lt;/a>もありますので、Goに慣れている方ならこちらを選択することもありですね。&lt;/p>
&lt;h2 id="静的ウェブページを載せられるプラットフォーム">静的ウェブページを載せられるプラットフォーム&lt;/h2>
&lt;p>ツールを使って、静的サイトを作ったら、次はホスティングが必要となりますね。静的ウェブページのホスティングの場合、このブログでも使用している&lt;a class="link" href="https://pages.github.com" target="_blank" rel="noopener"
>GitHub Pages&lt;/a>や&lt;a class="link" href="https://www.netlify.com" target="_blank" rel="noopener"
>netlify&lt;/a>のようなサービスがあり、データをGitなどでアップロードすると自動でビルドとデプロイが完了される便利さがあります。&lt;/p>
&lt;p>他にはクラウドを利用する方法があります。AWSやAzure、Google Cloud Platformのようなクラウドサービスには、&lt;a class="link" href="https://aws.amazon.com/s3" target="_blank" rel="noopener"
>S3&lt;/a>や&lt;a class="link" href="https://azure.microsoft.com/ja-jp/services/storage/blobs" target="_blank" rel="noopener"
>Blob&lt;/a>のようにウェブからアクセスできるストレージサービスが必ずありますが、このストレージにツールで作成した静的サイトをアップロードしてホスティングする方法もあります。特にGoogleのサービスの場合、&lt;a class="link" href="https://firebase.google.com" target="_blank" rel="noopener"
>Google Firebase&lt;/a>というアプリ開発に特化したプラットフォームもあるのでAPIとの連携が必要な場合は考慮できる候補ではないかと思います。&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>ここでは単にツールとプラットフォームを紹介(というより、言及)しただけですが、静的ウェブページでできることや活用できるものは、他にも多いようです。同じ静的ウェブページだとしても、どのような技術の組み合わせでどのような物が作り上げられるかがかなり変わってくるのですが、実際にどんな物ができるかは&lt;a class="link" href="https://jamstack.org" target="_blank" rel="noopener"
>JAMstack&lt;/a>のExamplesタブから色々発見できますので、参考にしてみてください。&lt;/p>
&lt;p>個人的にはGatsbyに興味があって、Reactの勉強のついでに、いつかポートフォリオのためのサイトをそれで作り上げてみようかなと思っています。Oracleクラウドだと無料のVMやDBも提供されるので、簡単なAPIを作成しておくのも可能になるかも知れませんね。いや、いい時代になったものです。皆さんもぜひ、静的ウェブページで自分だけのサイトを築き上げてみてください。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Single Page Applicationの略で、従来のWebアプリケーションが複数の画面で構成されていたことに対して、画面を一つにして開発の効率やパフォーマンスの向上を図ったWebアプリケーションのこと。画面がサーバサイドと分離されているため、バックエンドとして選択できるものの幅が広いという特徴もあります。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Progressive Web Applicationの略で、Webアプリでありながらもネイティブアプリならではのメリット(パフォーマンスが高い、インストールすることでオフラインでも利用可能)を採用したアプリケーションのことを指します。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>