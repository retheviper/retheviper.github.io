<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on Korean-man in Tokyo</title><link>https://retheviper.github.io/tags/spring/</link><description>Recent content in spring on Korean-man in Tokyo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 30 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://retheviper.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>WebFluxのFunctional Enpointに対する小考察</title><link>https://retheviper.github.io/posts/spring-webflux-dividing-router-and-handler/</link><pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-webflux-dividing-router-and-handler/</guid><description>前回、WebFluxではFunctional Endpointを使うべきかというポストを書いたことがありますが、今回はController/S</description></item><item><title>WebFluxではFunctional Enpointを使うべきか</title><link>https://retheviper.github.io/posts/spring-webflux-router/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-webflux-router/</guid><description>以前、Spring WebFluxに関するポストを書いたことがあって、そこで少しだけMVCパターン(Controller/Service)とF</description></item><item><title>年月を扱ってみる</title><link>https://retheviper.github.io/posts/kotlin-year-month/</link><pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/kotlin-year-month/</guid><description>Kotlin(Java)では、java.timeパッケージのクラスで日付や時間を処理することができます。例えばLocalDateTimeやL</description></item><item><title>Spring WebFlux、少し触ってみてからの話</title><link>https://retheviper.github.io/posts/spring-webflux-and-nonblocking/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-webflux-and-nonblocking/</guid><description>今まではずっとSpring MVCを使ってきたので、最近はKotlin + Spring WebFluxという組み合わせで簡単なアプリを作ってみているところで</description></item><item><title>Spring WebFluxって何？</title><link>https://retheviper.github.io/posts/spring-webflux/</link><pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-webflux/</guid><description>Springが初めて発表されたのが2002年なので、およそ20年に近い時間が経ちました。今はJavaと言えば当たり前のようにSpringを使</description></item><item><title>MyBatisよりJPAが使いたい</title><link>https://retheviper.github.io/posts/spring-data-jpa/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-data-jpa/</guid><description>個人的に、クエリーやDBのプラグインなど、DBそのものによるデータの整形はあまりよくないと思っていて、なんからの「処理」が入る場合にSQL文</description></item><item><title>REST APIでのSpring Securityの例外ハンドリングを実装する</title><link>https://retheviper.github.io/posts/spring-rest-api-security-handling/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-rest-api-security-handling/</guid><description>前回はREST APIでのログインの方式と、JWTを使った認証認可について説明しました。でも、アプリケーション全体のセキュリティという観点から</description></item><item><title>JWTによるREST APIのログインを実現する</title><link>https://retheviper.github.io/posts/spring-rest-api-login-with-jwt/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-rest-api-login-with-jwt/</guid><description>最近は、本格的にSpring SecurityによるREST APIでのログインの実装を勉強しています。実際の業務で使うことになるかどうかは分か</description></item><item><title>REST APIでのログインのためには</title><link>https://retheviper.github.io/posts/spring-rest-api-how-to-login/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-rest-api-how-to-login/</guid><description>新しい案件が始まって、AngularとSpring bootによるSPA(Single Page Application)を作ることとなりましたが、まだ</description></item><item><title>条件で動作するアノテーションを使う</title><link>https://retheviper.github.io/posts/spring-conditional/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-conditional/</guid><description>アノテーションは普通のJavaでも使えるもので、様々なライブラリやフレームワークでは積極活用していますね。中でも、最もアノテーションを有効活</description></item><item><title>Jasyptでプロパティを暗号化する</title><link>https://retheviper.github.io/posts/spring-settings-encryption/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-settings-encryption/</guid><description>Springでは、application.propertiesやapplication.ymlファイルに別途設定したい項目を定義することによ</description></item><item><title>ServiceのImplクラスをYAMLで選択する</title><link>https://retheviper.github.io/posts/spring-switching-service/</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-switching-service/</guid><description>Springではビジネスロジックを書く場合、一般的にServiceというクラスを作成することになります。Serviceは重要な処理が入るため</description></item><item><title>Rest APIからRest APIにファイルを送る</title><link>https://retheviper.github.io/posts/spring-rest-template/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-rest-template/</guid><description>ウェブアプリケーションを開発していると、一つのRest APIだけで全ての機能を自己完結させる必要はない時もあります。例えば組み込みたい機能が</description></item><item><title>newしたインスタンスの中でBeanを使いたい</title><link>https://retheviper.github.io/posts/spring-bean-with-yaml/</link><pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-bean-with-yaml/</guid><description>一般的なJavaプロジェクトなら、外部設定ファイル(YAML)を記載してその値を読み込む場合なら私の以前のポストのようにできます。しかし、今</description></item><item><title>SpringのDIはコンストラクターでしましょう</title><link>https://retheviper.github.io/posts/spring-dependency-injection/</link><pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/spring-dependency-injection/</guid><description>Springの代表的な特徴といえば、それは色々ありますが、一つをあげるとしたらやはり@AutowiredによるDI1ではないかと思います。初</description></item></channel></rss>