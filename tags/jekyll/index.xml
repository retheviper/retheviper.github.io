<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jekyll on Korean-man in Tokyo</title><link>https://retheviper.github.io/tags/jekyll/</link><description>Recent content in Jekyll on Korean-man in Tokyo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://retheviper.github.io/tags/jekyll/index.xml" rel="self" type="application/rss+xml"/><item><title>今年のブログの話</title><link>https://retheviper.github.io/posts/renew-blog/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/renew-blog/</guid><description>&lt;img src="https://retheviper.github.io/images/magic.webp" alt="Featured image of post 今年のブログの話" />&lt;p>すでに気づいている方もいらっしゃるかと思いますが、2年ぶりにブログのテーマを変えました。正確にはテーマだけでなく、静的ページ生成ツールを&lt;a class="link" href="https://jekyllrb.com/" target="_blank" rel="noopener"
>Jekyll&lt;/a>から&lt;a class="link" href="https://gohugo.io/" target="_blank" rel="noopener"
>Hugo&lt;/a>に変えました。こういうのが気軽にできるので、最初からブログをGithub Pagesで公開したことは本当によかったなと今は思っています。&lt;/p>
&lt;p>サイトの生成ツールを変えたことで各ポストのURLにも変化があり、もしお気に入りなどに設定しておいた方には申し訳ないことをしましたが、それを踏まえても改善できたところが多いと思いますので、ご了承ください。&lt;/p>
&lt;p>さて、今回はそんなブログの刷新に関する話となりますが、大きくわけて「ブログがどう変わったか」と「これからブログでやっていきたいこと」について述べさせていただきたいと思います。&lt;/p>
&lt;h2 id="uxの改善">UXの改善
&lt;/h2>&lt;p>UXの観点で改善されたことは、ブログ刷新での第一順位の目標でもありました。他にも色々とあるかと思いますが、まずは以下のようなものがあります。&lt;/p>
&lt;h3 id="画面遷移の改善">画面遷移の改善
&lt;/h3>&lt;p>以前のブログはメインから個別のポストに遷移するときにアニメーションが含まれていました。（ポスト一覧を表示するところでも同じものが使われていました）画面遷移時にアニメーションを入れるというのはもうトレンドとしては古いものでもあり、何より画面遷移が遅いような感覚があるので改善したかったです。なので、今回は反応が早くしてみました。&lt;/p>
&lt;h3 id="検索機能">検索機能
&lt;/h3>&lt;p>タグとカテゴリ、そしてアーカイブがあれば十分かなと思いましたが、キーワードでポストを探したい時もありますね。以前は検索機能を付けようとしてもうまくいかなかったので、ちゃんと検索のできるテーマを採用しました。&lt;/p>
&lt;h3 id="デザイン">デザイン
&lt;/h3>&lt;p>個人的にはダークモードが好きで、全体的に黒いテーマを選ぼうかなと思いましたが、幸いボタンを押すだけでダークモードへの転換ができるテーマがあったので、こちらを選びました。もっと良いのは、このダークモードはシステムの設定と連動されるということです。なので、ダークモードが好みではない場合は白い画面を見ることができます。一つ残念なのは、コードブロックのスタイルはまたブログとは別ということですが…これはのちに何か方法があったら対応したいと思います。&lt;/p>
&lt;p>他には、モバイル画面でもちゃんと画像が見えたり、メニューやレイアウトなども色々とモダンなデザインになったのが嬉しいところです。&lt;/p>
&lt;h3 id="ポスト表示">ポスト表示
&lt;/h3>&lt;p>以前はポストの一覧から、ポストの画像をクリックするとそのポストの詳細画面に遷移するのではなく、画像が拡大されるという問題があ理ましたがそれを改善できました。そしてポストごとに読みにかかる大まかな時間を表示できるようになったので、記事を読まれる方にもどれを読むか参考するに良い情報を提供できているかと思います。&lt;/p>
&lt;h2 id="内部的な変化">内部的な変化
&lt;/h2>&lt;p>さて、今までは主にUXの観点からの話でしたが、実は上記で挙げた項目は単純にJekyllのテーマを変えるだけでも対応ができるものでした。それをあえてHUGOに変えてまでブログの刷新を追求した理由を今から話したいと思います。&lt;/p>
&lt;h3 id="管理がしやすい">管理がしやすい
&lt;/h3>&lt;p>Jekyllの場合、一つのテーマがRubyで書かれた一つのアプリを扱うようなものだったので、Gemfileの依存関係のアップデートが必要だったり、ローカルでサーバを起動するまで時間がかかったり、テーマを変えるたびに色々と設定や構成をいじる必要がありました。HUGOの場合、そのような問題はほとんどありませんでした。テーマはGithubのリポジトリをサブモジュールとしてインポートすることができて、あとはコンテンツと基本的な設定をいじるだけです。なので、実際に時間がかかったのは添付画像などリソースのパスが変わったための対応などを除くと、1時間ほどだったような気がします。&lt;/p>
&lt;p>また、以前は画像が一つのフォルダに集約されていたため、ポストの添付する画像を管理するのががかなり面倒臭い作業でしたが、今はポストごとに別フォルダを使用していて、そのフォルダに画像を入れるだけなので管理がより簡単になりました。なので、今後は画像の添付も以前よりは積極的にやっていこうと思います。&lt;/p>
&lt;p>HUGOはGoで書かれてあるため、ローカルでサーバを起動するのが早いのも良いところです。&lt;/p>
&lt;h3 id="カスタマイズが楽">カスタマイズが楽
&lt;/h3>&lt;p>以前は自動でRSSフィードを作ってくれる機能があるものの、全体のポストが対象となっていませんでした。テーマやJekyllの設定をいじれば解消できる問題だったとは思いますが、前述した通り、テーマが一つのアプリのようなものなので、カスタマイズが簡単ではありません。それに比べ、HUGOはより単純なものとなっていてテーマや設定のカスタマイズも簡単にできます。今もメニューは元々テーマの設定を変えるだけでカスタマイズできるものもありますが、一部は自分の方で修正したものもあります。どれも時間があまりかからなく、すぐにできるのが魅力的でした。&lt;/p>
&lt;p>&lt;a class="link" href="https://gohugo.io/content-management/shortcodes/" target="_blank" rel="noopener"
>shortcode&lt;/a>でHTMLとJavaScriptの添付をテンプレート化できるのも個人的にはHUGOの魅力ではないかと思います。使い勝手がいいので、色々と活用できそうなところが多いですね。&lt;/p>
&lt;h2 id="これからは">これからは
&lt;/h2>&lt;p>ブログの生成ツールを変えて物理的に良くなったところの話ができたので、次はそのブログで何をしていきたいかを述べたいと思います。&lt;/p>
&lt;p>最初は意欲も溢れていて、さまざまな技術に触れてそこで自分が学んだことや感じたこと、そして試行錯誤など多彩な記事を書いていたと思います。今振り返ってみると「当時の自分はこんなにもわかってないものが多かったのか」と、恥ずかしくなる瞬間もありますが、少なくとも今よりはもっと力を入れていた気がします。&lt;/p>
&lt;p>個人的に、このブログの更新は少なくとも月に2回を目指しているのですが、気持ちだけが先走ってあまり読む価値のないポストもいくつか書いてきたのではないかと反省しています。&lt;/p>
&lt;p>なので、今年はいくつかの技術を実際使ってみるという目標をたて、それらに関する記事を書いていきたいと思います。今のところは以下のようなものを考えています。&lt;/p>
&lt;h3 id="jetpack-compose">Jetpack Compose
&lt;/h3>&lt;p>新年の目標としても挙げていたものですが、実は去年から少しづつ触っている状態で、今年は実際にAndroidとデスクトップアプリケーションを作ってみたいと思っています。ちょうど去年は&lt;a class="link" href="https://www.jetbrains.com/ja-jp/lp/compose-mpp/" target="_blank" rel="noopener"
>Compose Multiplatform&lt;/a>も正式リリースしているので、時期的にちょうどいいかと思います。&lt;/p>
&lt;p>SwiftUIの方も、&lt;a class="link" href="https://developer.apple.com/documentation/Xcode/About-Continuous-Integration-and-Delivery-with-Xcode-Cloud" target="_blank" rel="noopener"
>XCode Cloud&lt;/a>の発表や&lt;a class="link" href="https://developer.apple.com/support/unlisted-app-distribution/" target="_blank" rel="noopener"
>リンクでのアプリ公開が可能になったり&lt;/a>、&lt;a class="link" href="https://www.apple.com/jp/swift/playgrounds/" target="_blank" rel="noopener"
>Swift Playgrounds&lt;/a>でアプリのビルドが可能になったことにより興味を持っている状態ではありますが、まずは自分が仕事でKotlinを使っていて、Composeの方をある程度使いこなせるようになってから挑戦してみた方がいいかなと思っているところです。&lt;/p>
&lt;p>せっかくMacを使っているので、一度はSwiftでアプリを作ってみないとですね。&lt;/p>
&lt;h3 id="svelte">Svelte
&lt;/h3>&lt;p>会社の方では&lt;a class="link" href="https://nuxtjs.org/" target="_blank" rel="noopener"
>Nuxt.js&lt;/a>を使っているので、こちらでも良いかと思いましたが、結局自分が画面を触ることになるのはプライベートでしかチャンスがない気がしたので、興味本意で選んだのが&lt;a class="link" href="https://svelte.dev/" target="_blank" rel="noopener"
>Svelte&lt;/a>です。&lt;/p>
&lt;p>まだ技術としては成熟したものではない気はしますが、そろそろ&lt;a class="link" href="https://kit.svelte.dev/" target="_blank" rel="noopener"
>Sveltekit&lt;/a>のようなものも登場していて、何よりも学習にかかる時間や効率を考えたときに、自分が画面を作るとしたら最も生産性が高くなりそうな技術だなと思いました。まぁ、これは実際触ってみないとわからないものですが…&lt;/p>
&lt;p>他に理由としては、&lt;a class="link" href="https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-web-frameworks" target="_blank" rel="noopener"
>Stackoverflow Survey&lt;/a>で最も愛されたウェブフレームワークに選定されたから、というのもあります。多くのエンジニアが好きという技術は、まずその理由が知りたくなりますので。（同じ理由で、Rustも触ってみたいと思っています）&lt;/p>
&lt;h3 id="quarkus">Quarkus
&lt;/h3>&lt;p>会社で使っているSpring bootのビルドとテスト、デプロイにかかる時間を短くしたいのですが、その対策としてQuarkusへの移行を考慮しています。稼働中のサービスのフレームワークを変えるということはかなりのリスキーなことではありますが、成功した場合は生産性も上がり起動速度やメモリのようなメリットがかなりでかい気がしているので、いつになるかはわかりませんが、ぜひ挑戦してみたいタスクとして設定しています。移行に成功しても失敗しても、色々と勉強になりそうではありますね。&lt;/p>
&lt;h2 id="最後に">最後に
&lt;/h2>&lt;p>ブログの外見は変わり、十分成功的な移行になったと思いますので、次はその中身を充実にしていくのが課題ですね。今まで通り、一人前のエンジニアになりたいという気持ちを忘れず、少しづつでも前に進むような（そして読まれる方にも役立つような）ポストを書けたらなと思います。&lt;/p>
&lt;p>では、また！&lt;/p></description></item></channel></rss>