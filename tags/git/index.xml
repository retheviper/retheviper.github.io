<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Korean-man in Tokyo</title><link>https://retheviper.github.io/tags/git/</link><description>Recent content in Git on Korean-man in Tokyo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 20 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://retheviper.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>JenkinsのJobを実行する</title><link>https://retheviper.github.io/posts/jenkins-build-trigger/</link><pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/jenkins-build-trigger/</guid><description>&lt;img src="https://retheviper.github.io/images/jenkins.jpg" alt="Featured image of post JenkinsのJobを実行する" />&lt;p>今回は、Jenkinsで生成したJobを実行する方法について述べたいと思います。基本的にJenkinsの管理コンソールでJobを実行することは可能ですが、いちいちログインしてJobを起動することは便利ではないです。なので「とある条件でJobを自動的に実行したい」と思うようになりますね。例えば簡単に考えられるものとしてまず「定期的実行」があるでしょう。特定の時間、もしくは頻度などを指定して自動的に実行してくれるバッチ的な処理にはこのような設定が必要ですね。また、とある条件が満たされた時にだけ実行したい場合もあります。たとえばGitのリポジトリにコミットが発生したときは、その時だけビルドしたいですね。&lt;/p>
&lt;p>JenkinsのJobではこのような、条件によるJobの自動実行を設定することが可能です。これを&lt;code>Build Trigger&lt;/code>と呼びます。基本設定でも必要なパターンの最低限は揃えていますし、プラグインの組み合わせによってはより多彩な設定でJobを実行するように設定できます。今回のポストでは、そのビルドトリガーにどんなものがあるか、またどのように使えるかということを述べたいと思います。&lt;/p>
&lt;h2 id="build-triggerの種類">Build Triggerの種類&lt;/h2>
&lt;p>JenkinsでJobを生成すると、GeneralとSource Code Managementのタブの後にBuild Triggerというタブがあることを確認できます。プラグインの構成が違うと増えたり減ったりもするので一度確認してみてください。私はJenkinsをインストールするときオススメのプラグイン構成を選んでいるので、以下の構成になっています。&lt;/p>
&lt;p>&lt;img src="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_triggers.png"
width="1680"
height="988"
srcset="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_triggers_hu00fef49e47b5e282d20bbc90d1220528_95149_480x0_resize_box_3.png 480w, https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_triggers_hu00fef49e47b5e282d20bbc90d1220528_95149_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Jenkins Build Triggers"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;ul>
&lt;li>Trigger builds remotely&lt;/li>
&lt;li>Build after other projects are built&lt;/li>
&lt;li>Build periodically&lt;/li>
&lt;li>GitHub hook trigger for GITScm polling&lt;/li>
&lt;li>Poll SCM&lt;/li>
&lt;/ul>
&lt;p>では、これらの機能がそれぞれどんな意味を持ち、どう活用できるかを一つづつ見てみましょう。&lt;/p>
&lt;h2 id="trigger-builds-remotely">Trigger builds remotely&lt;/h2>
&lt;p>&lt;img src="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_trigger_remote.png"
width="1680"
height="988"
srcset="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_trigger_remote_hu50e475e7f75480d7014cd74da184ed70_113077_480x0_resize_box_3.png 480w, https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_trigger_remote_hu50e475e7f75480d7014cd74da184ed70_113077_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Jenkins Build Triggers Remote"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;p>これは、「遠隔」という表現通り、Jenkinsの管理コンソールに接続しなくてもJobを外部から実行できるようにするという意味です。このメニューを選ぶと、URLでJobをコールできるようになります。&lt;code>Authentication Token&lt;/code>に認証として使うトークン名を入力すると、以下のようなURLでJobをコールできます。&lt;/p>
&lt;p>(JenkinsのURLが&lt;code>192.168.0.2:8080&lt;/code>、Job名が&lt;code>TriggerTest&lt;/code>、トークン名が&lt;code>buildToken&lt;/code>であると仮定)&lt;/p>
&lt;ol>
&lt;li>&lt;code>http://192.168.0.2:8080/job/TriggerTest/build?token=buildToken&lt;/code>&lt;/li>
&lt;li>&lt;code>http://192.168.0.2:8080/job/TriggerTest/buildWithParameters?token=buildToken&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>１番の設定は、パラメーターなしでただJobを実行するときに用います。２番目の場合は、パラメーターを渡したいときに使えますね。ここで受け取るパラメーターは、Generalタブで&lt;code>This project is parameterized&lt;/code>をチェックし、パラメーターを追加すると設定できます。パラメーターで受け取った値はJobの中のシェルスクリプトなどで外部変数として使うことができます。&lt;/p>
&lt;p>&lt;img src="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_parameter.png"
width="1680"
height="988"
srcset="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_parameter_hu48c66969c690693ea0aa9449c705d249_96179_480x0_resize_box_3.png 480w, https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_parameter_hu48c66969c690693ea0aa9449c705d249_96179_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Jenkins Build Parameter"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;p>LinuxのCurlなど、外部からのコールが必要である時使うと便利な機能です。&lt;/p>
&lt;h2 id="build-after-other-projects-are-built">Build after other projects are built&lt;/h2>
&lt;p>&lt;img src="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_after.png"
width="1680"
height="988"
srcset="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_after_hu50e475e7f75480d7014cd74da184ed70_102819_480x0_resize_box_3.png 480w, https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_after_hu50e475e7f75480d7014cd74da184ed70_102819_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Jenkins Build After"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;p>JenkinsではJobを複数生成することができます。そしてJobを複数生成することはそれぞれ違う機能をするJobをそれぞれの目的に合わせて分けるという意味でしょう。ただ場合によってはそれらのJobを連携する必要もあるかもしれません。同じプログラムの中でもメソッドやクラスは分けてもそれらを繋いで使うことになりますので。&lt;/p>
&lt;p>こちらのオプションをチェックすると、どんなJobの後にビルドするかを入力できます。複数のJobを登録することもできますね。&lt;code>Projects to watch&lt;/code>に先にビルドしたいJob名を入力し、下の三つのオプションを選びます。JenkinsのJobの実行結果には&lt;code>stable&lt;/code>(成功)&lt;code>unstable&lt;/code>(一部成功)&lt;code>fail&lt;/code>(失敗)の三段階があって、ここで選ぶのは前段階のJobがその三つのうちどのような結果になったかという判定の条件です。&lt;/p>
&lt;ul>
&lt;li>Trigger only if build is stable&lt;/li>
&lt;li>Trigger even if the build is unstable&lt;/li>
&lt;li>Trigger even if the build fails&lt;/li>
&lt;/ul>
&lt;p>１番目は、前段階のJobが成功的にビルドできた場合。成果物が必要だったりするとこちらのオプションですね。２番目はビルドが不安定でも実行する。また３番目は失敗しても実行する。各自目的と用途が違うので、必要に合わせて適合したものを選びましょう。&lt;/p>
&lt;h2 id="build-periodically">Build periodically&lt;/h2>
&lt;p>&lt;img src="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_period.png"
width="1680"
height="988"
srcset="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_period_hu50e475e7f75480d7014cd74da184ed70_97469_480x0_resize_box_3.png 480w, https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_build_period_hu50e475e7f75480d7014cd74da184ed70_97469_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Jnekins Build Period"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;p>時間による定期実行が欲しい場合はこちらのオプションを使います。&lt;code>Schedule&lt;/code>の欄に、Jenkins固有のルールに合わせて周期を書くと自動的に条件に合わせてJobのビルドが繰り返されます。かなり複雑ではありますが、一旦紹介します。&lt;/p>
&lt;p>&lt;code>基本フォーマット&lt;/code>&lt;/p>
&lt;ol>
&lt;li>時間単位は空白を基準に分ける&lt;/li>
&lt;li>記入順は分(minute)、時間(hour)、日付(day of month)、月(month)、週(week)
&lt;ol>
&lt;li>分(minute): 0から59までの数字&lt;/li>
&lt;li>時間(hour): 0から23までの数字&lt;/li>
&lt;li>日付(day of month): 1から31までの数字&lt;/li>
&lt;li>月(month): 1から12までの数字&lt;/li>
&lt;li>週(week): 0から7前での数字(0と７は日、1は月、2は火、3は水、4は木、5は金、6は土)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>*&lt;/code>は入力できる全範囲の値を許容するという意味(分の位置に入力すると0~59までの全数字)&lt;/li>
&lt;li>&lt;code>M-N&lt;/code>のように&lt;code>-&lt;/code>を入れると範囲の指定が可能(&lt;code>2-4&lt;/code>は2から4までの値)&lt;/li>
&lt;li>&lt;code>M-N/X&lt;/code>または&lt;code>*/X&lt;/code>は合間の意味(時間の位置に&lt;code>*/2&lt;/code>と入力すると、２時間置きという意味になる)&lt;/li>
&lt;li>&lt;code>A,B,C&lt;/code>のように複数の値を列挙できる&lt;/li>
&lt;/ol>
&lt;p>そのほかに、周期的に実行されるJobが複数ある場合は&lt;code>H&lt;/code>を使うことがオススメです。例えばJobが10種類あって、それぞれを&lt;code>0 0 * * *&lt;/code>にすると、全てのJobが毎日0時に実行されることになりますね。もしサーバーのスペックがあまりよくなかったり、Jobの数がそれ以上になると負荷は無視できないレベルになるはずです。&lt;/p>
&lt;p>そこで&lt;code>H H * * *&lt;/code>に指定すると、Jenkinsで自動判断を行い、サーバーへの負荷があまり発生しない時間帯にJobが実行されるようになります。もちろん&lt;code>H&lt;/code>でも範囲の指定ができますので&lt;code>H H(0-1) * * *&lt;/code>のように指定すると、毎日0時から1時までの間、負荷の低い時間帯にビルドが行われます。&lt;/p>
&lt;p>このフォーマットに従って書かれたいくつかの例を見てみましょう。&lt;/p>
&lt;ul>
&lt;li>15分置きでビルド実行: &lt;code>H/15 * * * *&lt;/code>&lt;/li>
&lt;li>毎時間の30分までに、10分置きでビルド実行(1時から1時半まで、2時から2時半までなど): &lt;code>H(0-29)/10 * * * *&lt;/code>&lt;/li>
&lt;li>平日の9時から16時の間、２時間置きにビルド実行: &lt;code>H 9-16/2 * * 1-5&lt;/code>&lt;/li>
&lt;li>1月から11月の間、1日と15日だけビルド実行: &lt;code>H H 1,15 1-11 *&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>フォーマットになれるまでは少し時間がかかりそうですが、かなり複雑なルールまで対応できるので魅力的なプションですね。&lt;/p>
&lt;h2 id="github-hook-trigger-for-gitscm-polling">GitHub hook trigger for GITScm polling&lt;/h2>
&lt;p>&lt;img src="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_github_hook.png"
width="1680"
height="988"
srcset="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_github_hook_hu50e475e7f75480d7014cd74da184ed70_99882_480x0_resize_box_3.png 480w, https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_github_hook_hu50e475e7f75480d7014cd74da184ed70_99882_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Jenkins GitHub Hook"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;p>このオプションは&lt;a class="link" href="https://github.com" target="_blank" rel="noopener"
>GitHub&lt;/a>との連動で、リポジトリにPushが発生するとビルドが行われるということです。Jenkins内ではこのオプションを選ぶだけであまり複雑な設定はないですが、GitHubのリポジトリでPushが発生したということをJenkins側に知らせるための設定が必要となります。&lt;/p>
&lt;p>GitHubのリポジトリに入ると、上段に&lt;code>Settings&lt;/code>というタブがあります。それをクリックし、さらに&lt;code>Webhooks&lt;/code>というメニューに入ります。そうすると以下のような画面が現れます。&lt;/p>
&lt;p>&lt;img src="https://retheviper.github.io/posts/jenkins-build-trigger/github_webhook1.png"
width="2056"
height="1014"
srcset="https://retheviper.github.io/posts/jenkins-build-trigger/github_webhook1_hu8c53a7835c87a3669a5e1050263cf3b2_193247_480x0_resize_box_3.png 480w, https://retheviper.github.io/posts/jenkins-build-trigger/github_webhook1_hu8c53a7835c87a3669a5e1050263cf3b2_193247_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GitHub Webhook"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>ここで&lt;code>Add Webhooks&lt;/code>ボタンを押すと、また以下のような画面になります。&lt;/p>
&lt;p>&lt;img src="https://retheviper.github.io/posts/jenkins-build-trigger/github_webhook2.png"
width="2044"
height="1592"
srcset="https://retheviper.github.io/posts/jenkins-build-trigger/github_webhook2_hu3233655cd17570cf9e2f8934eadc16b5_326515_480x0_resize_box_3.png 480w, https://retheviper.github.io/posts/jenkins-build-trigger/github_webhook2_hu3233655cd17570cf9e2f8934eadc16b5_326515_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GitHub Webhook 2"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>ここでも複雑な設定はいらなく、&lt;code>Payload URL&lt;/code>にJenkinsのURL/github-webhookと書くだけです。例えばJenkinsのURLが&lt;code>192.168.0.2:8080&lt;/code>だとすると、&lt;code>http://192.168.0.2:8080/github-webhook/&lt;/code>と書きます。これでリポジトリにPushが発生したら、Jobは自動ビルドされます。WebサーバーでのGit管理もこれで簡単にできますね。&lt;/p>
&lt;h2 id="poll-scm">Poll SCM&lt;/h2>
&lt;p>&lt;img src="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_poll_scm.png"
width="1680"
height="988"
srcset="https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_poll_scm_hu50e475e7f75480d7014cd74da184ed70_95577_480x0_resize_box_3.png 480w, https://retheviper.github.io/posts/jenkins-build-trigger/jenkins_poll_scm_hu50e475e7f75480d7014cd74da184ed70_95577_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Jenkins Poll SCM"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>'&lt;/p>
&lt;p>SCMとは、&lt;code>Source Control Management(ソース管理構成)&lt;/code>のことです。&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>GitやSVNなどのツールによる意味します。Poll SCMを選択すると、&lt;code>Build periodically&lt;/code>同様&lt;code>Schedule&lt;/code>の入力欄が現れます。ここに同じく周期を入力します。ただ何が違うかというと、設定した時間になっても必ずしもビルドが行われるのではないということです。設定した時間になるとソースの確認をして、そこで変更があった場合のみビルドが行われるらしいですね。GitやSVNの連動で使える設定みたいです。&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>様々なビルドトリガーの指定ができるゆえ、活用できる方法が多いという面もまたJenkinsの魅力ではないかと思います。Jenkins自体のアップデート対応も、周期的に&lt;code>yum update&lt;/code>するようなJobを構成するとできそうな気がしますね。そのほか、Git連動と&lt;code>systemctl&lt;/code>でのサービス管理機能を組み合わせて&lt;code>Tomcat&lt;/code>や&lt;code>Node.js&lt;/code>の管理もローカルでできますので便利です。&lt;/p>
&lt;p>それではまた、便利な使い方を見つけたらJenkinsのポストを載せましょう！&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>ソフトウェアエンジニアリングの観点からは、Software Configuration Management(ソフトウェア構成管理)の略でもあります。簡単にいうとソースコードだけでなく、開発環境やビルド構造などの全般的な環境情報を定義・管理することを構成管理というらしいです。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>