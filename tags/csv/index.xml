<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csv on Korean-man in Tokyo</title><link>https://retheviper.github.io/tags/csv/</link><description>Recent content in csv on Korean-man in Tokyo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 27 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://retheviper.github.io/tags/csv/index.xml" rel="self" type="application/rss+xml"/><item><title>data classのListをCSVにする</title><link>https://retheviper.github.io/posts/kotlin-write-csv/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/kotlin-write-csv/</guid><description>&lt;img src="https://retheviper.github.io/images/kotlin.jpg" alt="Featured image of post data classのListをCSVにする" />&lt;p>アプリを書いていると、DBに保存した形とは違う形でデータを読み込んだり出力するケースが多いです。代表的に、多くのバックエンドアプリで採用しているREST APIがそうですね。APIの入力値と戻り値は、DBに保存されている形とは一致しないケースが多く、必要(リクエストを送信してきた側の都合)に合わせて適切にパラメータを受け取り、レスポンスを返すようになっています。そして時と場合によっては、人間が楽に読める形としてデータをまとめる必要もあります。そういった場合はExcelファイルやCSV、PDFといったいろいろなものを想定できますね。&lt;/p>
&lt;p>今回のポストも場合も人が読める形のファイルとして、特にCSVを扱う場合にKotlin側の実装をどうやっていくかに関するものです。&lt;/p>
&lt;h2 id="kotlinでcsvを扱う">KotlinでCSVを扱う&lt;/h2>
&lt;p>KotlinのCSV読み込み/書き込みのライブラリとして&lt;a class="link" href="https://github.com/doyaaaaaken/kotlin-csv/" target="_blank" rel="noopener"
>kotlin-csv&lt;/a>があり、JVMだけでなくKoltin/JSの場合でもこのライブラリを使って簡単にCSVを扱えます。更に&lt;a class="link" href="https://github.com/blackmo18/kotlin-grass" target="_blank" rel="noopener"
>kotlin-grass&lt;/a>というライブラリもあり、&lt;code>kotlin-csv&lt;/code>との組み合わせででCSVのデータを簡単にdata classのListとしてまとめることもできますね。読み込みの際に指定できるデータのフォーマットやカスタムマッピングオプションなどの機能も豊富にあり、かなり使いやすく良いライブラリとなっています。&lt;/p>
&lt;p>しかし、実は&lt;code>kotlin-csv&lt;/code>を使うときに問題が一つあります。先に述べた通りCSVにデータの出力そのものは可能なものとなっているのですが、読み込みの時にdata classへのマッピングには別のライブラリが必要であったように、data classのリストを書き込むには追加の処理が必要となります。これは、kotlin-csvの書き込み用のメソッドが以下のようになっているからです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">fun&lt;/span> &lt;span style="color:#50fa7b">writeAll&lt;/span>(rows: List&amp;lt;List&amp;lt;Any?&amp;gt;&amp;gt;, targetFile: File, append: Boolean = &lt;span style="color:#ff79c6">false&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">open&lt;/span>(targetFile, append) { writeRows(rows) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで&lt;code>rows&lt;/code>が書き込みで使うデータとなりますが、型が&lt;code>List&amp;lt;List&amp;lt;Any?&amp;gt;&amp;gt;&lt;/code>になっているので、列のデータを一つの行としてListに定義し、それをさらにListに格納することでCSVのデータ全体を定義する必要があります。これはつまり、data classのリストを書き込むためには、フィールド一つ一つを列として定義し、それらをListとしてまとめる必要があるということです。また、CSVには一般的にヘッダが含まれますが、&lt;code>List&amp;lt;List&amp;lt;Any?&amp;gt;&amp;gt;&lt;/code>の形だと最初の行にヘッダのみを定義した行は必要となることでもありますね。&lt;/p>
&lt;p>一見複雑に見えますが、&lt;a class="link" href="https://kotlinlang.org/docs/reflection.html" target="_blank" rel="noopener"
>reflection&lt;/a>を利用すると、data classのフィールド名とその値を得ることができますので、それを利用してdata classのListをこのメソッドに適した形に変えられます。これをヘッダを作る方法と、data classの値を行に変更する二つの段階で分けて説明していきます。&lt;/p>
&lt;h3 id="data-classからヘッダを作る">data classからヘッダを作る&lt;/h3>
&lt;p>まずはヘッダを作ります。ヘッダを作るには、data classからフィールドを取得し、そのフィールドの名前のみを取得するといいでしょう。&lt;code>id&lt;/code>というフィールドがあるとしたら、ヘッダもそのまま&lt;code>id&lt;/code>になるということです。フィールド名とは別の名前をつけたい場合はアノテーションを活用する方法を考えられますが、まずはフィールド名をそのまま使う方法から述べたいと思います。&lt;/p>
&lt;p>Kotlinのdata classから、フィールドを取得する方法が3つがあります。まずは、&lt;a class="link" href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/members.html" target="_blank" rel="noopener"
>KClass.members&lt;/a>があります。ただ、これだとメソッドを含め、全てのメンバーを持ってくることになります。以下のようにですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">data&lt;/span> &lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">Data&lt;/span>(&lt;span style="color:#ff79c6">val&lt;/span> id: Int, &lt;span style="color:#ff79c6">val&lt;/span> name: String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> members = Data&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.members
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(members)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// [val Line_2.Data.id: kotlin.Int, val Line_2.Data.name: kotlin.String, fun Line_2.Data.component1(): kotlin.Int, fun Line_2.Data.component2(): kotlin.String, fun Line_2.Data.copy(kotlin.Int, kotlin.String): Line_2.Data, fun Line_2.Data.equals(kotlin.Any?): kotlin.Boolean, fun Line_2.Data.hashCode(): kotlin.Int, fun Line_2.Data.toString(): kotlin.String]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>フィールド名が現れているのでこれも使える方法の一つではありますが、やはりdata classだと基本的に&lt;code>equals()&lt;/code>, &lt;code>hashCode()&lt;/code>, &lt;code>copy()&lt;/code>, &lt;code>toString()&lt;/code>, &lt;code>componentN()&lt;/code>のようなメソッドが
できてしまうので、これらをフィルタする必要があります。例えば、以下のようにですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> memberProperties = Data&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.members.filterNot { &lt;span style="color:#ff79c6">it&lt;/span>.name.contains(&lt;span style="color:#f1fa8c">&amp;#34;component&amp;#34;&lt;/span>) &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#ff79c6">it&lt;/span>.name &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;copy&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#ff79c6">it&lt;/span>.name &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;equals&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#ff79c6">it&lt;/span>.name &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;hashCode&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#ff79c6">it&lt;/span>.name &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;toString&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(memberProperties)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// [val Line_2.Data.id: kotlin.Int, val Line_2.Data.name: kotlin.String]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、フィルタをしなくてももっと簡単にフィールドのみを抽出できる方法もあります。&lt;a class="link" href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/member-properties.html" target="_blank" rel="noopener"
>memberProperties&lt;/a>を使うことです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> memberProperties = Data&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.memberProperties
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(memberProperties)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// [val Line_2.Data.id: kotlin.Int, val Line_2.Data.name: kotlin.String]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ただ、この方法にも問題はあります。取得したフィールドの順番が、data classに定義した通りにならなく、アルファベット順になるということです。以下の例を見ると、nameとageの順で定義したフィールドが、ageとnameの順になっているのがわかります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">data&lt;/span> &lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">Person&lt;/span>(&lt;span style="color:#ff79c6">val&lt;/span> name: String, &lt;span style="color:#ff79c6">val&lt;/span> age: Int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> memberProperties = Person&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.memberProperties
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(memberProperties) &lt;span style="color:#6272a4">// name, age順にならない
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// [val Line_11.Person.age: kotlin.Int, val Line_11.Person.name: kotlin.String]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここでどうしてもフィールドを定義した順に取得したい場合、data classのコンストラクタを使う方法があります。まずはコンストラクタを使った方法ですが、これはdata classに、自動的にコンストラクタがフィールドを定義した順番通りのパラメータを持つように生成されるということを利用した方法です。以下のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> parameters = Person&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.primaryConstructor&lt;span style="color:#ff79c6">!!&lt;/span>.parameters.mapNotNull { &lt;span style="color:#ff79c6">it&lt;/span>.name }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(parameters) &lt;span style="color:#6272a4">// [name, age]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>多少強引な方法ではありますが、これでフィールドとして使うフィールド名は取得できました。では、次にアノテーションを使う場合を見ていきましょう。&lt;/p>
&lt;h4 id="アノテーションを使う場合">アノテーションを使う場合&lt;/h4>
&lt;p>フィールド名をそのままヘッダとして利用したくない場合は、アノテーションを活用できます。フィールドとしてStringを持つアノテーションを定義して、ヘッダを読み取るときにそのフィールドにつけたアノテーションを取得するという方法です。例えば、以下のようなアノテーションを定義したとしましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>@Target(AnnotationTarget.PROPERTY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">annotation&lt;/span> &lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">CsvHeaderName&lt;/span>(&lt;span style="color:#ff79c6">val&lt;/span> value: String)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>アノテーションは、以下のようにdata classで使います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">data&lt;/span> &lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">Person&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @CsvHeaderName(&lt;span style="color:#f1fa8c">&amp;#34;名前&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">val&lt;/span> name: String,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @CsvHeaderName(&lt;span style="color:#f1fa8c">&amp;#34;年齢&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">val&lt;/span> age: Int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そしてこのdata classのアノテーションを取得していきます。&lt;code>memberProperties&lt;/code>でフィールドを取得した場合、そのフィールドからアノテーションの一覧(アノテーションは複数存在できるので)を取得し、そこから先に定義した&lt;code>CsvHeaderName&lt;/code>のみをフィルタします。あとはアノテーションがあるかどうかをみて、どちらの値を使うかを決めればいいですね。以下のコードが、そのサンプルです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> datas = listOf(Person(&lt;span style="color:#f1fa8c">&amp;#34;John&amp;#34;&lt;/span>, &lt;span style="color:#bd93f9">20&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> headers = datas.first()&lt;span style="color:#ff79c6">!!::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.memberProperties.map { &lt;span style="color:#ff79c6">property&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">val&lt;/span> name = &lt;span style="color:#ff79c6">property&lt;/span>.annotations.filterIsInstance&amp;lt;CsvHeaderName&amp;gt;().firstOrNull() &lt;span style="color:#6272a4">// アノテーションはないケースもある
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> name&lt;span style="color:#ff79c6">?.&lt;/span>&lt;span style="color:#ff79c6">value&lt;/span> &lt;span style="color:#ff79c6">?:&lt;/span> &lt;span style="color:#ff79c6">property&lt;/span>.name &lt;span style="color:#6272a4">// アノテーションがnullの場合は、フィールド名を使う
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(headers) &lt;span style="color:#6272a4">// [年齢, 名前]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>primaryConstructor&lt;/code>のパラメータで取得した場合でも、やり方は大きく変わりません。この場合は、コンストラクタのパラメータを基準にループしながら一致するフィールドを探すという処理が追加されるだけです。例えば以下のようにです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> fieldNames = seeds.first()&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.primaryConstructor&lt;span style="color:#ff79c6">!!&lt;/span>.parameters.mapNotNull { &lt;span style="color:#ff79c6">it&lt;/span>.name }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> headers = fieldNames.mapNotNull { name &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// パラメータと一致するフィールドを対象に処理を行う
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> datas.first()&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.memberProperties.find { &lt;span style="color:#ff79c6">it&lt;/span>.name &lt;span style="color:#ff79c6">==&lt;/span> name }&lt;span style="color:#ff79c6">?.&lt;/span>let { &lt;span style="color:#ff79c6">property&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">val&lt;/span> headerName = &lt;span style="color:#ff79c6">property&lt;/span>.annotations.filterIsInstance&amp;lt;CsvHeaderName&amp;gt;().firstOrNull()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerName&lt;span style="color:#ff79c6">?.&lt;/span>&lt;span style="color:#ff79c6">value&lt;/span> &lt;span style="color:#ff79c6">?:&lt;/span> &lt;span style="color:#ff79c6">property&lt;/span>.name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで、ヘッダのデータはできました。次は、このヘッダに合わせて下に出力する行としてdata classをListに変換するのみですね。&lt;/p>
&lt;h3 id="data-classをlistに変える">data classをListに変える&lt;/h3>
&lt;p>ヘッダの処理で既にやっていたように、data classをListに変換する場合でも処理は大きく変わりません。違う点は、フィールドから実際のデータを取得するだけですね。ここでは、コンストラクタからパラメータを取得した場合を想定してコードを書きましょう。&lt;/p>
&lt;p>Kotlinのreflectionでフィールドの値を取得する場合はJavaと変わらなくて、取得したフィールドにdata classのインスタンスを渡すだけとなります。ただ、フィールドがnullの場合は考慮する必要があります。nullになってしまうと、その列自体がスキップされ、最終的に出力されたCSVのデータで列がずれる場合があるからです。なので、空白のStringを指定するなどで、行ごとの長さ(Listのサイズ)を合わせる必要があります。以下のようにですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>datas.map { d &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fieldNames.mapNotNull { name &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.memberProperties.find { &lt;span style="color:#ff79c6">it&lt;/span>.name &lt;span style="color:#ff79c6">==&lt;/span> name }&lt;span style="color:#ff79c6">?.&lt;/span>let { &lt;span style="color:#ff79c6">field&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">field&lt;/span>.call(d) &lt;span style="color:#ff79c6">?:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#6272a4">// フィールドの値を取得し、nullのばいは空白にする
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ただ、ここで時間や日付を扱う場合、フォーマッタを利用したいケースがあるかと思います。例えば、アプリの中では&lt;code>LocalTime&lt;/code>として扱っているが、CSVとしては&lt;code>HH:mm&lt;/code>のような形で出力したい場合や、&lt;code>LocalDate&lt;/code>を&lt;code>yy/MM/dd&lt;/code>にしたい場合などですね。ここでフォーマット自体は、&lt;a class="link" href="https://docs.oracle.com/javase/jp/8/docs/api/java/time/format/DateTimeFormatter.html" target="_blank" rel="noopener"
>DateTimeFormatter&lt;/a>を使うだけですが、問題は取得したフィールドがどの型であるかの判定です。&lt;/p>
&lt;p>Kotlinのreflectionで取得したフィールドは、&lt;a class="link" href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-property1/" target="_blank" rel="noopener"
>KProperty1&lt;/a>という型になっています。ここでどうやって元の型を取得するかが問題ですね。このクラスは&lt;a class="link" href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-callable/" target="_blank" rel="noopener"
>KCallable&lt;/a>というインタフェースを実装していて、ここには&lt;a class="link" href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-callable/return-type.html" target="_blank" rel="noopener"
>returnType&lt;/a>というプロパティがあります。これで&lt;a class="link" href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" target="_blank" rel="noopener"
>KType&lt;/a>というインタフェースが取得できるようになるので、これを持って判定をおこ泣くことになります。&lt;/p>
&lt;p>しかし、名前から分かるように、&lt;code>KType&lt;/code>はKotlinの型に関するインタフェースとなっています。比較したい&lt;code>LocalDate&lt;/code>や&lt;code>LocalTime&lt;/code>などのクラスはJavaのものなので、直接的な比較ができないですね。幸い、JavaのクラスでもKotlinで参照できる&lt;code>Ktype&lt;/code>として変換することはできます。以下のようにです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> localDateKType: KType = LocalDate&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>なので、あとは分岐によって適切なフォーマッタを使うだけですね。以下のようにです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>datas.map { d &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fieldNames.mapNotNull { name &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.memberProperties.find { &lt;span style="color:#ff79c6">it&lt;/span>.name &lt;span style="color:#ff79c6">==&lt;/span> name }&lt;span style="color:#ff79c6">?.&lt;/span>let { &lt;span style="color:#ff79c6">field&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">field&lt;/span>.call(d)&lt;span style="color:#ff79c6">?.&lt;/span>let {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">when&lt;/span> (&lt;span style="color:#ff79c6">field&lt;/span>.returnType) { &lt;span style="color:#6272a4">// タイプによる分岐
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> LocalDate&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType() &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> dateFormatter.format(&lt;span style="color:#ff79c6">it&lt;/span> &lt;span style="color:#ff79c6">as&lt;/span> LocalDate)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalTime&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType() &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> timeFormatter.format(&lt;span style="color:#ff79c6">it&lt;/span> &lt;span style="color:#ff79c6">as&lt;/span> LocalTime)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalDateTime&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType() &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> dateTimeFormatter.format(&lt;span style="color:#ff79c6">it&lt;/span> &lt;span style="color:#ff79c6">as&lt;/span> LocalDateTime)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff79c6">?:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ただ、ここでもう一つ注意しなければならないのは、nullableなフィールドのKTypeは別のものになるということです。つまり、上記のコードでは、以下のようなdata classのフィールドは分岐処理でフォーマッタが働かなくなるということです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// どのフィールドもフォーマットされない
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">data&lt;/span> &lt;span style="color:#ff79c6">class&lt;/span> &lt;span style="color:#50fa7b">DateTimes&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">val&lt;/span> date: LocalDate?,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">val&lt;/span> time: LocalTime?,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">val&lt;/span> dateTime: LocalDateTime?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この場合は、&lt;code>KType&lt;/code>を作るときにnullableであることを指定することで簡単に解決できます。あとは分岐で、両方チェックするようにするだけです。以下のようにですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>datas.map { d &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fieldNames.mapNotNull { name &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.memberProperties.find { &lt;span style="color:#ff79c6">it&lt;/span>.name &lt;span style="color:#ff79c6">==&lt;/span> name }&lt;span style="color:#ff79c6">?.&lt;/span>let { &lt;span style="color:#ff79c6">field&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">field&lt;/span>.call(d)&lt;span style="color:#ff79c6">?.&lt;/span>let {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">when&lt;/span> (&lt;span style="color:#ff79c6">field&lt;/span>.returnType) { &lt;span style="color:#6272a4">// nullableでもnullableではない場合でも分岐でフォーマットする
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> LocalDate&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType(), LocalDate&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType(nullable = &lt;span style="color:#ff79c6">true&lt;/span>) &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> dateFormatter.format(&lt;span style="color:#ff79c6">it&lt;/span> &lt;span style="color:#ff79c6">as&lt;/span> LocalDate)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalTime&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType(), LocalTime&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType(nullable = &lt;span style="color:#ff79c6">true&lt;/span>) &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> timeFormatter.format(&lt;span style="color:#ff79c6">it&lt;/span> &lt;span style="color:#ff79c6">as&lt;/span> LocalTime)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalDateTime&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType(), LocalDateTime&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">class&lt;/span>.createType(nullable = &lt;span style="color:#ff79c6">true&lt;/span>) &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> dateTimeFormatter.format(&lt;span style="color:#ff79c6">it&lt;/span> &lt;span style="color:#ff79c6">as&lt;/span> LocalDateTime)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff79c6">?:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとは、ヘッダと、data classから取得した値のリストを結合して&lt;code>kotlin-csv&lt;/code>の&lt;code>writeAll()&lt;/code>に渡すだけですね。一つ、値は上記のコードで既に&lt;code>List&amp;lt;List&amp;lt;Any&amp;gt;&amp;gt;&lt;/code>の形となっていますが、ヘッダは&lt;code>List&amp;lt;String&amp;gt;&lt;/code>なので、ヘッダは更にListに入れる必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// ヘッダ
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">val&lt;/span> header = &lt;span style="color:#6272a4">// 省略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 実際のデータ
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">val&lt;/span> rows = datas.map { &lt;span style="color:#6272a4">/** 省略 */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>csvWriter().writeAll(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rows = listOf(headers) + rows,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> targetFile = targetFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでヘッダが先に行に書き込まれ、次の行からはdata classのフィールドに格納した実際の値が出力されることになりました。&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>この度軽く「KotlinなんだからKotlin制のライブラリを使おう」と、軽い気持ちで採用したライブラリが想定していたものと違ったので困っていましたが、幸いJavaを使っていた時に&lt;a class="link" href="https://poi.apache.org/" target="_blank" rel="noopener"
>Apache POI&lt;/a>を使って似たような機能をするライブラリを作ってみた経験があったのでその知識を活かせたと言えます。当時はまだ駆け出しのエンジニア(今もそうと思っていますが)だったので大変苦労した思い出でもありますが、今はその経験があってこそ対処できたようなものなので大変ありがたい経験だったなと思いました。&lt;/p>
&lt;p>上記のコードに対してはちょっとしたライブラリを作ってみたので、またどこかで活用してみたいものですね。色々と改善して、のちにMaven Repositoryのようなところでも公開できるようになったらなと思います。&lt;/p>
&lt;p>では、また！&lt;/p></description></item></channel></rss>