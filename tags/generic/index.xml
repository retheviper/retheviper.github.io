<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>generic on Korean-man in Tokyo</title><link>https://retheviper.github.io/tags/generic/</link><description>Recent content in generic on Korean-man in Tokyo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 30 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://retheviper.github.io/tags/generic/index.xml" rel="self" type="application/rss+xml"/><item><title>ReflectionとGenericを活用する</title><link>https://retheviper.github.io/posts/java-reflection/</link><pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/java-reflection/</guid><description>&lt;img src="https://retheviper.github.io/images/java.jpg" alt="Featured image of post ReflectionとGenericを活用する" />&lt;p>今回の仕事で学んだことは、自分のコードを他人がライブラリーとして使うときはどのように実装していくかの方法です。とある機能をするスクリプトを書くこと、エンドユーザーが使うUIやそコンテンツを処理するロジックなどだけに関わったことのない自分にとってはとても新しい経験になりました。今までだと自分が担当した機能を具現し、それを最適化していいだけでした。でも、ライブラリーは基本的にコードを扱える人が使うものなので設計が全く違いますね。&lt;/p>
&lt;p>そして、難しかった部分の一つは、柔軟性を持たせることでした。例えばデータを受け取り、処理していく中で、今までは自分が実装したBeanにデータがマッピングされていることを第一の前提条件としていました。それが今の仕事では、「どんなBeanが入ってくるかわからないから、それに対応する」ようにする必要がありました。&lt;/p>
&lt;p>まずクラスやインスタンスを引数として受け取る方法を知る必要がありますね。最初はObjectそのものを使おうと思いましたが、調べてみると&lt;code>Generic&lt;/code>というものがあったので、そちらを使うことにしました。&lt;/p>
&lt;p>次にそのGenericを使って、引数として受け取ったBeanです。自分が設計したBeanだけを使うなら、Beanが持つフィールドのデータ型も知っていいて、Getter/Setterからデータのやりとりができますね。しかし自分が作ったものではないと、フィールドのデータ型もGetter/Setterメソッドもどう呼ぶかもわからなくなります。ここでどう対応したらいいだろうか…と悩み、探し出した答えが&lt;code>Reflection&lt;/code>でした。&lt;/p>
&lt;p>今回のポストはその二つを使い、どう「自分が作っていないBeanを処理」したかについて述べ地と思います。&lt;/p>
&lt;h2 id="generic">Generic&lt;/h2>
&lt;p>Genericとは、「データのタイプを一般化」するということです。総称型とも呼ぶらしいです。クラスの中で使うタイプを、クラスの外部から設定するとき用いられると言いますね。今までは主に複数のデータ型やオブジェクトを処理したい場合は&lt;code>Object&lt;/code>を使ってきました。Javaでは一部のPrimitive(参照型)を覗くと、ほとんどのデータががオブジェクトとして扱われているので、もっとも上位のタイプであるObjectに変えられらからです。&lt;/p>
&lt;p>しかし、Objectを引数として使うと、メソッドの中のフィールドが何があるかわからなくなります。また、Getter/Setterによる値の指定・取得などの操作もできませんね。なのでオブジェクトそのものを受け取るだけでなく、インスタンスの中を直接覗く必要があります。&lt;/p>
&lt;p>ここでGenericを使うと、Objectと同じ機能(どんなインスタンスやクラスでも受け取れる)をしながらも、最初に具体的なタイプが決まるのでキャストがいらなくなります。これなら性能的にもよく、より安全な挙動を期待できますね。あとは実際どんな構造をしているかわからないObjectに対し、Reflectionを活用して、クラスやインスタンスの中を覗いたらメソッドもフィールドも取得できるというメリットもあります。&lt;/p>
&lt;p>まずインスタンスを引数として受け取る方法から見てみましょう。引数として&lt;code>T&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>を指定します。これでGenericタイプの引数を受け入れられます。つまり、インスタンス自体が引数となるということです。ただ、引数が&lt;code>T&lt;/code>の場合はメソッドの戻り値の前でも&lt;code>&amp;lt;T&amp;gt;&lt;/code>を宣言する必要があります。コードで表現すると以下のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Beanのインスタンスを受け取るメソッド
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#8be9fd">boolean&lt;/span> &lt;span style="color:#50fa7b">isBean&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>T parameter&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// ... 何かの処理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 使用例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>BeanObject beanObject &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> BeanObject&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>isBean&lt;span style="color:#ff79c6">(&lt;/span>beanObject&lt;span style="color:#ff79c6">))&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// ... 何かの処理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Listの中にもGenericを使うことができます。たとえば以下のように書くと、どんなタイプも受け入れられるようになりますね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> list &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> ArrayList&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>インスタンスではなく、クラスそのものをGenericで受け入れるには以下のように書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Beanのクラスを受け取るメソッド
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">boolean&lt;/span> &lt;span style="color:#50fa7b">isBean&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>Class&lt;span style="color:#ff79c6">&amp;lt;?&amp;gt;&lt;/span> parameter&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// ... 何かの処理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 継承もできる(限定)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">boolean&lt;/span> &lt;span style="color:#50fa7b">isStringBean&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>Class&lt;span style="color:#ff79c6">&amp;lt;?&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">extends&lt;/span> String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> parameter&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// ... 何かの処理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 使用例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>isBean&lt;span style="color:#ff79c6">(&lt;/span>BeanObject&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">class&lt;/span>&lt;span style="color:#ff79c6">))&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// ... 何かの処理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>こうやってGenericの引数を渡してもらう準備は完了です。次は、そうやって受け取った引数を扱うReflectionについて調べてみましょう。&lt;/p>
&lt;h2 id="reflection">Reflection&lt;/h2>
&lt;p>クラスの具体的なタイプをわからなくても、メソッド・コンストラクター・フィールドなどににアクセスできるようにしてくれるAPIをReflectionと言います。取得したメソッド・コンストラクター・フィールドはいずれもそのまま使ったり、値(戻り値)を取得したり、つけられているアノテーションを取得するなど、普通のクラスでできることは全部できます。&lt;/p>
&lt;p>では、このReflectionを実際どう使うかを以下のコードで紹介します。まずはインスタンスからクラスを取得する方法と、さらに取得したクラスからコンストラクターを取得するコードです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#8be9fd">boolean&lt;/span> &lt;span style="color:#50fa7b">isBean&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>T object&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// インスタンスからクラスを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Class&lt;span style="color:#ff79c6">&amp;lt;?&amp;gt;&lt;/span> objectClass &lt;span style="color:#ff79c6">=&lt;/span> object&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getClass&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// クラスからさらにインスタンスを生成する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Object instance &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">newInstance&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// クラスのパッケージ名を取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> String &lt;span style="color:#ff79c6">package&lt;/span> = objectClass.getPackage&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// パッケージを含むクラス名を取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Stirng classNamePackageInvolved &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getName&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// クラス名だけを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> String className &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getSimpleName&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 配列でpublicコンストラクターたちをを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Constructor&lt;span style="color:#ff79c6">[]&lt;/span> constructors &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getConstructors&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 特定のpublicコンストラクターを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Constructor constructor &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getConstructor&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>parameter1&lt;span style="color:#ff79c6">,&lt;/span> parameter2&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#ff79c6">...);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 取得したコンストラクターからインスタンスを生成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Object instance2 &lt;span style="color:#ff79c6">=&lt;/span> constructor&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">newInstance&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>クラス自体を扱うことができるので、その中身がわかれば新しいインスタンスを生成して使うこともできますね。それでは次に、フィールドを取得する方法を紹介します。&lt;/p>
&lt;h2 id="fieldの取得">Fieldの取得&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">boolean&lt;/span> &lt;span style="color:#50fa7b">isBean&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>T object&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Class&lt;span style="color:#ff79c6">&amp;lt;?&amp;gt;&lt;/span> objectClass &lt;span style="color:#ff79c6">=&lt;/span> object&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getClass&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 配列でpublicフィールドたちを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Field&lt;span style="color:#ff79c6">[]&lt;/span> fields &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getFields&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 特定のpublicフィールドを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Field field &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getField&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;フィールド名&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 配列で全フィールドたちを取得(public以外も)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Field&lt;span style="color:#ff79c6">[]&lt;/span> declaredFields &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getDeclardFields&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 特定のフィールドを取得(public以外も)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Field declaredFiled &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getDeclaredField&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;フィールド名&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Fieldでできること
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// フィールドに値を設定
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> field&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">set&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>object&lt;span style="color:#ff79c6">,&lt;/span> parameter&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// フィールドの値を取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> String fieldValue &lt;span style="color:#ff79c6">=&lt;/span> field&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>object&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// フィールドのアノテーションを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Annotation&lt;span style="color:#ff79c6">[]&lt;/span> annotations &lt;span style="color:#ff79c6">=&lt;/span> field&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getAnnotations&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで注意すべき部分は、フィールドを取得するときはクラスからであって、実際値を代入したり取得するときはその対象としてインスタンスを使うということです。クラスが設計図であり、インスタンスがその設計図で生成されたものだということが明確になる瞬間ですね。Reflectionを使うことのメリットはここにもあるのかも知れません。&lt;/p>
&lt;p>次には、メソッドをみていきます。&lt;/p>
&lt;h2 id="methodの取得">Methodの取得&lt;/h2>
&lt;p>メソッドもフィールドの場合とそう変わりません。クラスからメソッドを取得し、そのメソッドからさらに色々できるようになります。またコードを以下に用意しました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">boolean&lt;/span> &lt;span style="color:#50fa7b">isBean&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>T objectClass&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Class&lt;span style="color:#ff79c6">&amp;lt;?&amp;gt;&lt;/span> objectClass &lt;span style="color:#ff79c6">=&lt;/span> object&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getClass&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 配列でpublicメソッドたちを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Method&lt;span style="color:#ff79c6">[]&lt;/span> methods &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getMethods&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 特定のpublicメソッドを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Method method &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getMethod&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;メソッド名&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> parameter1&lt;span style="color:#ff79c6">,&lt;/span> parameter2&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#ff79c6">...);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 配列でメソッドたちを取得(public以外も)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Method&lt;span style="color:#ff79c6">[]&lt;/span> declaredMethods &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getDeclaredMethods&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 特定のメソッドを取得(public以外も)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Method declaredMethod &lt;span style="color:#ff79c6">=&lt;/span> objectClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getDeclaredMethod&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;メソッド名&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> parameter1&lt;span style="color:#ff79c6">,&lt;/span> parameter2&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#ff79c6">...);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Methodでできること
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// メソッド名の取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> String methodName &lt;span style="color:#ff79c6">=&lt;/span> method&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getName&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// メソッドの実行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Object methodInvoked &lt;span style="color:#ff79c6">=&lt;/span> method&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">invoke&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 引数のアノテーションを取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Annotation&lt;span style="color:#ff79c6">[]&lt;/span> parameterAnnotations &lt;span style="color:#ff79c6">=&lt;/span> method&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getParameterAnnotations&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 引数を取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Parameter&lt;span style="color:#ff79c6">[]&lt;/span> parameters &lt;span style="color:#ff79c6">=&lt;/span> method&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getParameters&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>アノテーションの場合はクラスでもフィールドでも取得できますが、メソッドの場合はそれに加えて引数のアノテーションも取得できるということが特徴です。また、引数そのものを取得することもできますね。もちろん&lt;code>Parameter&lt;/code>クラスでも引数名を取得するなど色々な操作ができます。&lt;/p>
&lt;h2 id="結論">結論&lt;/h2>
&lt;p>結局、道が見えてくると、解決の方法も見えてくるものです。メソッドをやコンストラクターに触れる必要もなく、引数で受け取ったインスタンスからフィールドを取得して、その値をObjectに代入する。そしてinstanceofを活用して分岐させ、キャストすることでデータを扱う、というシンプルな構造で自分のタスクは完成されました。簡単なコードで表現すると以下のような形ですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// クラスをわからないBeanを引数とするメソッド
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span>T&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#50fa7b">processSomething&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>T bean&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// 複数のタイプのオブジェクトがある
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> String stringObject&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Integer intObject&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// クラスとフィールドの取得
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Class&lt;span style="color:#ff79c6">&amp;lt;?&amp;gt;&lt;/span> beanClass &lt;span style="color:#ff79c6">=&lt;/span> bean&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getClass&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Field&lt;span style="color:#ff79c6">[]&lt;/span> beanFields &lt;span style="color:#ff79c6">=&lt;/span> beanClass&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getDeclardFields&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// ループで個別フィールドを取得し、一致するタイプのオブジェクトにフィールドの値を入れる
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>Field field &lt;span style="color:#ff79c6">:&lt;/span> beanFields&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// privateフィールドの場合はアクセスできない場合があるためアクセス可能にする
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>field&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">canAccess&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>bean&lt;span style="color:#ff79c6">))&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> field&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">setAccessible&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#ff79c6">true&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// フィールドの値を取得し、型を判断
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> Object value &lt;span style="color:#ff79c6">=&lt;/span> field&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>bean&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>value &lt;span style="color:#ff79c6">instanceof&lt;/span> String&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringObject &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>String&lt;span style="color:#ff79c6">)&lt;/span>value&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>value &lt;span style="color:#ff79c6">instanceof&lt;/span> Integer&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> intObject &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>value&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>どうですか。方法がわかれば簡単にできるものなのでは。さらに応用して、インスタンスの一部の値だけを修正して返すなどの挙動もできそうです。色々活用できそうな面が多いですね。&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>このようにだいたいフィールドとメソッドがわかれば、これでどんなインスタンスやクラスが入ってきても、対応できそうな気がします。実際どうかはコンパイルして実行してみない限りわからないものですが…でも一つ、賢くなったような気はします。皆さんもぜひ、Reflectionを通じてクラスとインスタンスに対する理解を深めてみてください。&lt;/p>
&lt;p>それでは、また！&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Typeのこと。ただ、E(Element)やK(Key)、N(Number)、V(Value)も使えるらしいです。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>