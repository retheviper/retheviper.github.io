<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>module on Korean-man in Tokyo</title><link>https://retheviper.github.io/tags/module/</link><description>Recent content in module on Korean-man in Tokyo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 08 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://retheviper.github.io/tags/module/index.xml" rel="self" type="application/rss+xml"/><item><title>Moduleの問題に会った話</title><link>https://retheviper.github.io/posts/java-conflict-of-module/</link><pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/java-conflict-of-module/</guid><description>&lt;img src="https://retheviper.github.io/images/java.jpg" alt="Featured image of post Moduleの問題に会った話" />&lt;p>最近のJavaはバージョンアップが早いですね。自分が初めて学んだものは1.8でしたが、すぐ9がでて今は13もリリースを目前としています。バージョンアップはバグ修正や性能の向上など良い面が多いためなるべく自分が使っているプログラムは常に最新のバージョンを維持したいですが、言語のバージョンが上がる度、何が変わったかを確認しすでに存在するコードを見直すのは簡単な問題ではいですね。&lt;/p>
&lt;p>Javaはかなり歴史が長いので、現在のトレンドと比べてみると不便(パラダイムが変わったからという理由が多いと思いますが)な面が多いです。そして1.8が維持された期間が長かったのですが、そのため流行には遅れていますね。10になって型推論が導入されるなどトレンドを追いかけているような面もありますが、Kotlinのように同じくJVMを使う言語と比べてみるとまだ先が遠い印象はあります。&lt;/p>
&lt;p>もちろん変化は肯定的なものであって、元の特徴を維持しながらもトレンドに合う書き方ができるようになったというのは、その言語を使えるユーザーのプールが広くなったとも評価できるでしょう。でも、全ての要素において「古いものと新しいもの共存」ができるわけではなさそうです。そういう場合はどちらを使うかを選択する必要がありますね。&lt;/p>
&lt;p>今回のポストで話たいModuleがその代表的なものです。昔からの問題を改善するために導入されたものですが、結局は既存のコードに影響を与えてしまい、対応が必要となる部分です。最初は自分が書くコードでは考慮する必要がないものだろうと思っていたのですが、どうもそうはいかなかったです。なのでここでは、JavaのModuleが何であり、どんな問題を経験したかを述べたいと思います。&lt;/p>
&lt;h2 id="project-jigsaw">Project Jigsaw&lt;/h2>
&lt;p>ModuleはProject Jigsawという名で、1.7から導入を検討していたものらしいです。Moduleという名からわかるように、アプリケーションを起動する時読み込むライブラリー(Java内臓の)を選択することができるシステムです。1.8まではコマンドラインで起動するアプリケーションを作るとしても、基本的なシステムライブラリーであるSwingなどが含まれていたのですが、それを調整できるようになりました。要らないシステムライブラリーを除去するとアプリケーションのサイズも小さくなりますし、メモリーを節約できるというメリットもありますね。また、Javaの特徴でもあった「完璧にロードされるまでには時間がかかる」という問題も、このModuleの設定である程度解消できるようになりました。&lt;/p>
&lt;p>そのほかにも、パッケージの「Publicすぎる問題」も、Moduleで解消できるようです。JavaのクラスはProtected宣言で同じパッケージでアクセスできるようにできますが、パッケージが細かく分けられた場合は同じライブラリーの中でもアクセスできませんでした。そういう場合はPublicで宣言するしかなかったですね。Publicで宣言されたクラスはライブラリーの中だけではなく、どこでもアクセスできるようになるため問題が生じる可能性もあります。ライブラリーを作りながらクライアントに使って欲しいクラスと使って欲しくないクラスを分けることが難しいことだったということです。これをModule設定により外部へ公開するクラスと、ライブラリー内部に向けて公開されるクラスで分けられるようになりました。&lt;/p>
&lt;h2 id="moduleの実例">Moduleの実例&lt;/h2>
&lt;p>では、Public問題をModuleでどう解消できたかを、コードを持って説明します。まだ自分もModuleを積極的に使っているわけではないので基本となる部分だけですが、重要なポイントは以下の三要素だそうです。&lt;/p>
&lt;ul>
&lt;li>Name&lt;/li>
&lt;li>Exports&lt;/li>
&lt;li>Requires&lt;/li>
&lt;/ul>
&lt;p>まずNameは、Moduleそのものの名称を意味します。パッケージ名と同じ命名規則で書きます。次にExportsは、このModuleから外へ公開するパッケージのことを意味します。ModuleではPublicであっても、Exportsと明示されていないパッケージは外部からアクセスすることができません。そして最後にRequiresは他のModuleに対する依存関係を表します。&lt;/p>
&lt;p>これらを実際のコードで書くと、以下のようになります。デフォルト・パッケージに&lt;code>module-info.java&lt;/code>として記述されます。(Java9以後のシステムライブラリーから確認できます)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// module-info.javaの書き方
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>module com&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">module&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">mylibrary&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exports com&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">module&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">mylibrary&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">api&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requires com&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">module&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">exlibrary&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Exportsの場合、公開対象を指定することができます。つまり、アクセスできるMobuleを指定することができるということです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// exlibrary限定のPublic設定
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>module com&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">module&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">mylibrary&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exports com&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">module&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">mylibrary&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">api&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> to com&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">module&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">exlibrary&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Moduleはもちろん外部ライブラリーに対しても使うことができます。&lt;code>module-info.java&lt;/code>を作成する方法もありますが、Java9以前に作られたライブラリーの場合にはそれがない可能性が高いですね。このようにModuleかされていないライブラリーを含ませる必要がある場合は&lt;code>Automatic Module&lt;/code>か&lt;code>Unnamed Module&lt;/code>の二つの方法からライブラリーを分けて使うことになります。両方自動的にModuleとして扱われるという面では同じで、全てのパッケージにアクセスできるという面では同じですが、前者は&lt;code>modulepath&lt;/code>に属するものとして名前がある(Jarファイル名となります)ことに対して、後者は&lt;code>classpath&lt;/code>に属するもので名称がないためRequiresで指定することができません。&lt;/p>
&lt;h2 id="moduleでハマったところ">Moduleでハマったところ&lt;/h2>
&lt;p>自分がModuleであった問題は、同じパッケージをもつ二つのライブラリーの競合によるものでした。問題が生じたのは、既存のプロジェクトにGradleのタスクを追加しようとしていたので原因でした。Gradleのタスクを作成する方法は&lt;code>build.gradle&lt;/code>に直接taskを作成することでもできますが、最初自分が参考にしていた方法(Gradleの公式文書に従いました)では&lt;code>java-gradle-plugin&lt;/code>というプラグインを含ませる方法でした。こうすると自動的にJavaのライブラリーが追加されて、Javaでプラグインを書けられるようになりますが、ここに含まれているライブラリーがJavaのシステムライブラリーと競合を起こしました。&lt;/p>
&lt;p>元のプロジェクト(Java11を使っています)では&lt;code>javax.xml&lt;/code>をインポートしていて、これがJava9からは&lt;code>Deprecated&lt;/code>になり、最終的にJava11から除去されたらしいです。それがEclipse上では&lt;code>Unnnamed Module&lt;/code>として読み込まれていたらしく、ちょうど&lt;code>java-gradle-plugin&lt;/code>のパッケージにも同一名のパッケージが含まれていたので競合が起こったのです。そもそも除去されている扱いなので競合が生じるのがおかしいですが…エラ〜メッセージでは&lt;code>The package javax.xml.transform is accessible from more than one module: &amp;lt;unnamed&amp;gt;, javax.xml&lt;/code>と出力されていました。&lt;/p>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/51094274/eclipse-cant-find-xml-related-classes-after-switching-build-path-to-jdk-10" target="_blank" rel="noopener"
>似たような事例&lt;/a>を参考にすると、二つの解決法が提示されていましたがどちらも自分のプロジェクトでは使えませんでした。&lt;code>module-info.java&lt;/code>を作成するとマルチプロジェクトとなっていてサブプロジェクト間のパッケージ依存関係まで考慮するには複雑な手続きが必要でしたし、Eclipseのモジュール依存関係設定からシステムライブラリーの&lt;code>javax.xml&lt;/code>を除去すると、他にインポートしている&lt;code>java.sql&lt;/code>が&lt;code>javax.xml&lt;/code>に依存しているのでこちらも使えなくなるという問題がありました。&lt;/p>
&lt;p>そしてリンクの文を読んでみると、最新のJava13までこの問題(自分のケースと完璧に一致しているとは言えませんが)は解決されてないというので、どうしようもない状態でした。&lt;code>java-gradle-plugin&lt;/code>はGradleで管理されているライブラリーなのでこちらからうかつに手を出すこともできませんでした。&lt;/p>
&lt;h2 id="結局どうしたらいいか">結局どうしたらいいか&lt;/h2>
&lt;p>現時点では、外部ライブラリーを維持したまま競合だけを避ける方法はなさそうです。自分のModuleに対する理解がまだ足りてないことも原因かとは思いますが、結局はこのような事態が発生するとなるべく競合の原因となるライブラリーを除外するしか他の道はなさそうですね。便利さのために導入された新しい機能が、思わぬところで問題を起こしてしまうのはそう珍しいことでもないですが…3日ほど悩んだ私の選択は結局、そのライブラリーを使わないということしかなかったです。&lt;/p>
&lt;p>もちろん、Moduleの問題なのでバージョンに対するこだわりがなければJavaを1.８に下げるという方法もあります。ただ1.8はいずれサポートが終わるはずで、これからもJavaのバージョンはどんどん上がっていくはずなのでいつかは直面することになるかもしれない問題ですね。どうかJava14ではこのような問題が起こらないことを祈ります。&lt;/p></description></item></channel></rss>