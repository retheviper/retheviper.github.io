<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xml on Korean-man in Tokyo</title><link>https://retheviper.github.io/tags/xml/</link><description>Recent content in Xml on Korean-man in Tokyo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 20 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://retheviper.github.io/tags/xml/index.xml" rel="self" type="application/rss+xml"/><item><title>Pythonでxmlファイルを操作する(2)</title><link>https://retheviper.github.io/posts/python-xml-modifier-2/</link><pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/python-xml-modifier-2/</guid><description>&lt;img src="https://retheviper.github.io/images/python.webp" alt="Featured image of post Pythonでxmlファイルを操作する(2)" />&lt;p>&lt;a class="link" href="../python-xml-modifier-1" >前回のポスト&lt;/a>で、xmlファイルを操作するスクリプトを紹介しました。しかし、仕事でそのスクリプトをしばらく使わない方針となったため実際使うことがなく放置していましたが、方針が変わり作成しておいたスクリプトを実際適用してみるととある問題が出てきました。最初はスクリプトが問題だろうとは思わず、原因究明にだいぶ時間がかかりましたが、なんとか解決できた今はホッとしています。やはりコーディングという行為は設計通りの実装よりも変な挙動をしていないか確認するのが大事なのではないかと、今回も思いました。&lt;/p>
&lt;p>それでは具体的にどんな問題があり、どうコードを改善したかを今回のポストで述べていきたいと思います。厳密にいうとバグというよりは、詳細設計の段階でミスを起こしたという表現が正しいのかもしれませんが、理由はどうあれ当初の計画通り動かないコードを書いたことは反省しないといけないなと思うきっかけとなりました。これでまた成長できたと言えたらいいですね。&lt;/p>
&lt;h2 id="旧スクリプトの問題">旧スクリプトの問題
&lt;/h2>&lt;p>前回のポストで紹介したスクリプトは、一見思い通りに動いているように見えました。実際テストをしてみたときも、指定したエレメントのテキスト部はちゃんと変えてくれてましたね。しかし問題は、処理すべきxmlファイルのエレメント数が想定よりも多かったというところから発生しました。つまり、旧スクリプトではSELECT文を発行するDBのエレメントが一つ、INSERT文を発行するDBのエレメントが一つというシンプルな構成になっていましたが、今回は複数のエレメントを処理しなければならない状況となりました。&lt;/p>
&lt;p>それを旧スクリプトで処理しようとすると、一つのエレメントを書き換えたあと、残りのエレメントは無視して次のファイルに処理が移行していったのです。それがわからないまま処理が終わった時点で設計通りに動作してくれていると信じ、処理の終わったファイルを使うとエラーが発生した、というのがこのスクリプトを改修するきっかけとなりました。&lt;/p>
&lt;p>まず原因をわかったので、スクリプトの目標を修正します。今回の目標は「条件と一致する全エレメントの修正」です。&lt;/p>
&lt;h2 id="コードを改修する">コードを改修する
&lt;/h2>&lt;p>目標に合わせてコードを修正すると同時に、些細な問題も改善することにします。前回のスクリプトではフォルダー内のファイルをリストとして取得するために&lt;code>glob&lt;/code>のモジュールを使いました。わずかのコードで再帰的に下位フォルダー内のファイルまで収集してくれるので便利だったのですが、globのrecursiveオプションはPython3.5以上でしか使えないという問題があります。普段からPython3を使っていたなら問題はあまりないはずですが、他に使っているPythonのスクリプトは全てPython2を基準に作成されています。なのでこれをPython2でも使えるオプションに変えることにします。&lt;/p>
&lt;p>そしてメインとなる改善点としては、&lt;code>find&lt;/code>を&lt;code>findall&lt;/code>に変えることにします。まずDBコネクションのエレメントを全部取得し、ここで&lt;code>if&lt;/code>文を使えばDBのコネクション名によって分岐処理ができるはずです。また、今回変えたいDBコネクション名は&lt;code>From_PostgreSQL_01&lt;/code>のようにアンダースコアで連番が付いているものを&lt;code>From_PostgreSQL&lt;/code>のように連番だけ外すということなので、その仕組みも考えておきます。&lt;code>replace&lt;/code>を使う方法もありますが、これなら全てのケースに対して条件を書かなければならないですし、条件指定の例によっては重複の可能性もあります。なので&lt;code>rsplit&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>を使い、アンダースコアを基準に元の文字列を分割した後元のテキストを代替することにします。&lt;/p>
&lt;p>これらの要件定義から変わったことは以下となります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># -*- coding: UTF-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> xml.etree.ElementTree &lt;span style="color:#66d9ef">as&lt;/span> ET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 名前空間（prefix）をマップで宣言&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ns &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;fb&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;http://builder&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;fe&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;http://engine&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;mp&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;http://mapper&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># xmlファイル名を再帰的に取得(Python2向け)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fileList &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>base_dir &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>normpath(&lt;span style="color:#e6db74">&amp;#39;./baseFolder&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># 検索するディレクトリの起点を設定&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (path, dir, files) &lt;span style="color:#f92672">in&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>walk(base_dir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># xml2というファイルは消し、xmlファイルだけ書き換えしたいので分岐をかけ、xmlファイルだけをリスト化する&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> fname &lt;span style="color:#f92672">in&lt;/span> files:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;.xml2&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> fname):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fullfname &lt;span style="color:#f92672">=&lt;/span> path &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> fname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> os&lt;span style="color:#f92672">.&lt;/span>remove(fullfname)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;.xml&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> fname &lt;span style="color:#f92672">and&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.xml2&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> fname):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fullfname &lt;span style="color:#f92672">=&lt;/span> path &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> fname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fileList&lt;span style="color:#f92672">.&lt;/span>append(fullfname)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 取得したファイルを巡回しながらコネクション名の書き換え処理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> fileName &lt;span style="color:#f92672">in&lt;/span> fileList:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ファイルをパーシング開始&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree &lt;span style="color:#f92672">=&lt;/span> ET&lt;span style="color:#f92672">.&lt;/span>parse(fileName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># INSERTのコンポーネントのコネクション名に&amp;#39;_01&amp;#39;などの文字がついていると取る&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PutConnections &lt;span style="color:#f92672">=&lt;/span> tree&lt;span style="color:#f92672">.&lt;/span>findall(&lt;span style="color:#e6db74">&amp;#34;fe:Flow/fe:Component[@type=&amp;#39;RDB(Put)&amp;#39;]/fe:Property[@name=&amp;#39;Connection&amp;#39;]&amp;#34;&lt;/span>, ns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> PutConnection &lt;span style="color:#f92672">in&lt;/span> PutConnections:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;_0&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> PutConnection&lt;span style="color:#f92672">.&lt;/span>text):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PutConnection&lt;span style="color:#f92672">.&lt;/span>text &lt;span style="color:#f92672">=&lt;/span> PutConnection&lt;span style="color:#f92672">.&lt;/span>text&lt;span style="color:#f92672">.&lt;/span>rsplit(&lt;span style="color:#e6db74">&amp;#39;_&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#75715e"># rsplitで分割し、その結果物を元のテキストに入れる&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># SELECTのコンポーネントのコネクション名に&amp;#39;_01&amp;#39;などの文字がついていると取る&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GetConnections &lt;span style="color:#f92672">=&lt;/span> tree&lt;span style="color:#f92672">.&lt;/span>findall(&lt;span style="color:#e6db74">&amp;#34;fe:Flow/fe:Component[@type=&amp;#39;RDB(Get)&amp;#39;]/fe:Property[@name=&amp;#39;Connection&amp;#39;]&amp;#34;&lt;/span>, ns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> GetConnection &lt;span style="color:#f92672">in&lt;/span> GetConnections:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;_0&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> GetConnection&lt;span style="color:#f92672">.&lt;/span>text):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GetConnection&lt;span style="color:#f92672">.&lt;/span>text &lt;span style="color:#f92672">=&lt;/span> GetConnection&lt;span style="color:#f92672">.&lt;/span>text&lt;span style="color:#f92672">.&lt;/span>rsplit(&lt;span style="color:#e6db74">&amp;#39;_&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#75715e"># rsplitで分割し、その結果物を元のテキストに入れる&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># prefixが変わることを防止&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ET&lt;span style="color:#f92672">.&lt;/span>register_namespace(&lt;span style="color:#e6db74">&amp;#39;fb&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;http://builder&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ET&lt;span style="color:#f92672">.&lt;/span>register_namespace(&lt;span style="color:#e6db74">&amp;#39;fe&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;http://engine&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ET&lt;span style="color:#f92672">.&lt;/span>register_namespace(&lt;span style="color:#e6db74">&amp;#39;mp&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;http://mapper&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 書き換え処理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree&lt;span style="color:#f92672">.&lt;/span>write(fileName, &lt;span style="color:#e6db74">&amp;#39;UTF-8&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="最後に">最後に
&lt;/h2>&lt;p>ファイル取得部は&lt;code>glob&lt;/code>オプションで簡単にできたことに比べ少し複雑になっています。&lt;code>os.walk()&lt;/code>で起点のディレクトリを指定してパスとファイル名を取得します。ただ&lt;code>os.walk()&lt;/code>だとファイル名とパスは分離されるのでそれをつなぐ作業が必要ですね。そこで処理するファイルのリストに入れたり消したりする処理を加えます。これで以前の&lt;code>glob&lt;/code>と似たような挙動ができます。&lt;/p>
&lt;p>そして&lt;code>rsplit('_', 1)&lt;/code>で、まず&lt;code>From_PostgreSQL_01&lt;/code>という文字列は&lt;code>From_PostgreSQL&lt;/code>と&lt;code>01&lt;/code>に1回だけ分割されます。そして分割された文字列は配列になるので[0]を指定すると意図通り&lt;code>From_PostgreSQL_01&lt;/code>が&lt;code>From_PostgreSQL&lt;/code>に代替されます。また&lt;code>find&lt;/code>を&lt;code>findall&lt;/code>に変えただけで条件に一致する全エレメントをファイル内で探してリストにしてくれます。その中でループ処理するだけですね。これがわからなかった時は以前のコードにさらにループをかけたりして失敗していましたが、意外と簡単な解決策があったものです。&lt;/p>
&lt;p>これで完成されたコードは意図通りに動いてくれました。あとで変動があっても少しだけ変えればいいので個人的には満足しています。より綺麗な書き方はあるかもしれませんがね。そして教訓として、いつもテストは大事だなということを改めて覚えられました。常に確認と確認です。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;code>rsplit&lt;/code>と&lt;code>split&lt;/code>の違いは、方向です。前者が文字列の右側を基準に分割するなら、後者は左側からです。今回は文字列の末尾の連番を取りたいので、&lt;code>rsplit&lt;/code>を選びました。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Pythonでxmlファイルを操作する(1)</title><link>https://retheviper.github.io/posts/python-xml-modifier-1/</link><pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/python-xml-modifier-1/</guid><description>&lt;img src="https://retheviper.github.io/images/python.webp" alt="Featured image of post Pythonでxmlファイルを操作する(1)" />&lt;p>IT関係の仕事を選び、最も良いと思うところはやはり色々な状況に置かれることによって得られる経験が多いということではないかと思います。なぜかというと、独学だけでは言語の基礎文法はわかっても実際のコーディングではどう設計したらいいか、どんなモジュール(ライブラリーを含め)を使ったらいいかわからない場合があるからです。そもそも何を作ればいいかわからない場合が多いですね。大分類としてはウェブアプリケーションか、バッチで動くコードかということなどがあり、細かくはどんなDBを使って、どんな作業をしたいか(結合する対象など)の詳細を一人で全部想定することはかなり難しい作業ではないかと思います。しかし仕事ではある程度要件が決まっているので、その結合の方法と必要な作業がわかればあとは頑張るだけですから。目標設定が何よりも重要だということはまさにこれのことかもしれません。&lt;/p>
&lt;p>なので今回も仕事で任されたことです。要件はこうです。とあるツールを使って開発をしています。このツールではGUIでマップ上にアイコンを配置し、そのアイコンが一つの作業単位となっています。そしてアイコンとアイコンを結び、各アイコンにとある行動を設定することで全体なワークフローが出来上がる構造となっています。例えばDBのアイコンに接続先のDBの情報と発行するSQL文を入力し、ファイル出力のアイコンに繋ぐとそれを実行した時にDBからSQL文を実行した結果がファイルとして保存されます。このツールで作られたワークフローはxmlファイルとして保存されます。&lt;/p>
&lt;p>問題は、開発環境と本場環境での設定が違うところがあるということです。主にこのツールを通してやっている作業はDB関係のものですが、開発環境と本場環境でそれぞれDBの接続先情報が違います。そしてそのDBの接続先の設定はxmlファイルに保存されているので、開発の終わったxmlファイルを本場環境にデプロイするときはただのコピーでは不完全なので「DBの接続先情報を書き換える」作業が必要です。この作業をどう実装したから今回のポストのテーマとなります。&lt;/p>
&lt;h2 id="事前準備">事前準備
&lt;/h2>&lt;p>デプロイ先と、デプロイ元のサーバーは両方Linuxを使っています。そしてxmlファイルのソースはGitで管理することになっています。なのでまずデプロイ元からはGit pullし、DB情報を書き換えたあとはrsyncなどのコマンドでコピーすれば簡単に終わります。こちらの作業はJenkinsで自動化することにしました。ならば、残る問題はDB情報を書き換える作業をどう実装するかですね。&lt;/p>
&lt;p>xmlを分析してみたら、各アイコンのタグの下にはそのアイコンの詳細設定情報がありました。DBの処理を行うアイコンは二つあって、一つ目はSELECTを発行する(以下、From)もので、二つ目はINSERTを発行する(以下、To)ものでした。FromとToで接続先のDBは種類も違って(片方はPostgreSQLで、片方はSQLServer)スキーマやテーブル名も違うので分けて処理する必要があります。&lt;/p>
&lt;p>そして環境から考えると、Linuxで使える言語を選んだほうがいいでしょう。まずはシェルスクリプトを使ってコードを書いてみようと思いました。これが私の初のシェルスクリプトとなります。Javaよりは簡単ではないだろうか、という根拠のない自信からシェルを選びました。LinuxにはPythonも入っていましたが、そちらも触ったことがなかったのでまずシェルでやってみて、ダメだったらPythonに挑戦してみようかなと軽く思っていました。それが結果的には最初からPythonで書けばよかった…ってことになりましたが。&lt;/p>
&lt;p>ともかくやりたいこと、環境、道具が揃ったので早速実装に入りました。&lt;/p>
&lt;h2 id="シェルスクリプトでコーディング">シェルスクリプトでコーディング
&lt;/h2>&lt;p>シェルは初めてだったので、試行錯誤が多かったです。最初に学んだのがJavaだったので、同じ感覚で書こうとしたら全然動きません。何回か失敗を重ねながら得られた結論は、関数を使うという考え方を捨てて、どうコマンドを組み合わせるかが重要だということでした。それに気づくにはだいぶ時間がかかりましたが、まず大事なことはわかったのであとはどんなことをするかですね。&lt;/p>
&lt;p>まずはファイルを読み込むことからです。xmlファイルも結局はテキスト基盤なので、シェルでも読み込みはできます。For文一つで特定の拡張子をもつファイルを巡回しながら一行づつ読むことができるらしいです。そして既存のアイコン(このファイルを使うツールの表現を借りると、コンポーネント)のDB接続先の情報の行を把握し、書き換えれば完了。&lt;/p>
&lt;p>ただ、前述したようにFromとToのコンポーネントを区別する必要があります。xmlファイルを覗くとどうやらコンポーネントの構造(タグの種類)はほぼ同じみたいなので、どう判定するかが問題でした。シェルではxmlをパーシングできるモジュールなどはないみたいですからね。それでまずは行数を比較して、Fromのコンポーネントがより上にあったら１番目に引っかかったDB設定がFromのやつだ、という風に判定することにしました。以下はその実装のコードです。&lt;/p>
&lt;h2 id="コードの例シェルスクリプト">コードの例(シェルスクリプト)
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"># 下のフォルダを巡回しながらxmlの拡張子を持つファイルを変数のfileNameに入れる&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> fileName in &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#ae81ff">\f&lt;/span>ind . -name &lt;span style="color:#e6db74">&amp;#39;*.xml&amp;#39;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># コンポーネントの行数をつかめる(grepでコンポーネントのタグかを確認し、sedで行数を確保)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getComponentLine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>grep -n RDBGet &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span> | grep Component | sed -e &lt;span style="color:#e6db74">&amp;#39;s/:.*//g&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> putComponentLine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>grep -n RDBPut &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span> | grep Component | sed -e &lt;span style="color:#e6db74">&amp;#39;s/:.*//g&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># コネクションの行数をつかめる&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConnectionOneLine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>grep -n Connection &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span> | sed -e &lt;span style="color:#e6db74">&amp;#39;s/:.*//g&amp;#39;&lt;/span> | awk &lt;span style="color:#e6db74">&amp;#39;NR==1&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConnectionTwoLine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>grep -n Connection &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span> | sed -e &lt;span style="color:#e6db74">&amp;#39;s/:.*//g&amp;#39;&lt;/span> | awk &lt;span style="color:#e6db74">&amp;#39;NR==2&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># コネクション名をつかめる(cutでDB設定名だけを取り、awkで2種類以上の結果からどちらかを取る)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConnectionOneName&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>grep Connection &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span> | cut -d &lt;span style="color:#e6db74">&amp;#34;&amp;gt;&amp;#34;&lt;/span> -f &lt;span style="color:#ae81ff">2&lt;/span> | cut -d &lt;span style="color:#e6db74">&amp;#34;&amp;lt;&amp;#34;&lt;/span> -f &lt;span style="color:#ae81ff">1&lt;/span> | awk &lt;span style="color:#e6db74">&amp;#39;NR==1&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConnectionTwoName&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>grep Connection &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span> | cut -d &lt;span style="color:#e6db74">&amp;#34;&amp;gt;&amp;#34;&lt;/span> -f &lt;span style="color:#ae81ff">2&lt;/span> | cut -d &lt;span style="color:#e6db74">&amp;#34;&amp;lt;&amp;#34;&lt;/span> -f &lt;span style="color:#ae81ff">1&lt;/span> | awk &lt;span style="color:#e6db74">&amp;#39;NR==2&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>getComponentLine&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -lt &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>putComponentLine&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># get &amp;lt; putの場合ConnectionOneLineはgetのコネクション&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sed -i -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ConnectionOneLine&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> s/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ConnectionOneName&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/HONBADBFROM/g&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sed -i -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ConnectionTwoLine&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> s/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ConnectionTwoName&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/HONBADBTO/g&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># get &amp;gt; putの場合ConnectionOneLineはputのコネクション&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sed -i -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ConnectionTwoLine&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> s/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ConnectionTwoName&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/HONBADBFROM/g&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sed -i -e &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ConnectionOneLine&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> s/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ConnectionOneName&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/HONBADBTO/g&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>fileName&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="問題点">問題点
&lt;/h2>&lt;p>ファイルの形式がxmlであり、タグのパーシングで確実にコンポーネントを分けて処理していない現行の方式ではあまり安全だとは言えない処理です。そしてこの方式だとFromとToのコンポーネントがそれぞれ一つづつある場合は大丈夫かもしれませんが、どちらかのコンポーネントが一つでも増えたら処理の方法を変えるしかないです。もしかしたらそんなケースが増えると、そのケースに合わせてそれぞれ違うコードを書く必要があるかもしれません。そしてそれはいちいちファイルをチェックしてそれにあうコードとマッチさせる必要がありますね。これなら手書きで変えるのとあまり変わらないのでは…と思いますね。&lt;/p>
&lt;p>結果的に汎用性もなく、安全でもないコードとなってしまいました。こんなコードは本場では使えません。なので方法を変えることにしました。&lt;/p>
&lt;h2 id="pythonで書き直す">Pythonで書き直す
&lt;/h2>&lt;p>次の方法として、Pythonを使ってちゃんとパーシングを行うことにしました。挑戦してみてからわかったのですが、こんな簡単な作業をするときはPythonが正解なのではないかと思うくらい簡単でした。それにLinuxの環境では基本的にPythonが入っている場合も多いようなので(yumがPythonを使う代表的な例です)、インストールしなくてもいいというのがメリットでもあります。それにBashがLinuxの基本機能であるのでPythonよりは速度が早いのではないかと思っていましたが、必ずしもそうでもないらしいですね。ならばますますシェルスクリプトにこだわる理由は無くなります。&lt;/p>
&lt;p>ただLinuxに内蔵されているPythonは2が多いらしく(確認してみると、私の使うMacでもPython2が入っていました)、Pythonは2と3で文法が違うところも多くて特定の機能を使うには注意がいるらしいです。実際私の書いたコードでは、Python3でしか使えない部分があります。alternativeのようなコマンドでPythonのリンクを3に指定するという方法もありますが、それならPython2を使うプログラムで問題が起こる可能性があります。&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>なので最初からPython2のコードに書くか、実行するコードをPython3として実行するようにするか、Python2を使うプログラムの実行環境を変えるかの方法を工夫する必要がありました。&lt;/p>
&lt;p>ここで私は、自分が書いたコードをPython3で実行するよう(Jenkinsに埋め込むので、そちらの設定を通しています)にしました。コードは以下となります。&lt;/p>
&lt;h2 id="コードの例python">コードの例(Python)
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># -*- coding: UTF-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 日本語のコメントのために最初にエンコードを指定する&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># xmlパーサーとフォルダからファイルを取得するモジュールをインポート&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> xml.etree.ElementTree &lt;span style="color:#66d9ef">as&lt;/span> ET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> glob
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 名前空間（prefix）をマップで宣言&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ns &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;fb&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;http://foo.com/builder&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;fe&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;http://foo.com/engine&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;mp&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;http://foo.com/mapper&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ファイル名を再帰的に取得(recursiveオプションはPython3専用)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fileList &lt;span style="color:#f92672">=&lt;/span> glob&lt;span style="color:#f92672">.&lt;/span>glob(&lt;span style="color:#e6db74">&amp;#34;**/HOGE*.xml&amp;#34;&lt;/span>, recursive&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 取得したファイルを巡回しながらコネクション名の書き換え処理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> fileName &lt;span style="color:#f92672">in&lt;/span> fileList:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ファイルをパーシング開始&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree &lt;span style="color:#f92672">=&lt;/span> ET&lt;span style="color:#f92672">.&lt;/span>parse(fileName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Toのコンポーネントで子要素であるコネクション名を取得(prefix内)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> putCon &lt;span style="color:#f92672">=&lt;/span> tree&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#34;fe:WorkFlow/fe:Component[@type=&amp;#39;RDB(Put)&amp;#39;]/fe:Property[@name=&amp;#39;Connection&amp;#39;]&amp;#34;&lt;/span>, ns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> putCon&lt;span style="color:#f92672">.&lt;/span>text &lt;span style="color:#f92672">=&lt;/span> putCon&lt;span style="color:#f92672">.&lt;/span>text &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;x&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Fromのコンポーネントで子要素であるコネクション名を取得(prefix内)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getCon &lt;span style="color:#f92672">=&lt;/span> tree&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#34;fe:WorkFlow/fe:Component[@type=&amp;#39;RDB(Get)&amp;#39;]/fe:Property[@name=&amp;#39;Connection&amp;#39;]&amp;#34;&lt;/span>, ns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getCon&lt;span style="color:#f92672">.&lt;/span>text &lt;span style="color:#f92672">=&lt;/span> getCon&lt;span style="color:#f92672">.&lt;/span>text &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;y&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 書き込みの時prefixが変わることを防止&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ET&lt;span style="color:#f92672">.&lt;/span>register_namespace(&lt;span style="color:#e6db74">&amp;#39;fb&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;http://foo.com/builder&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ET&lt;span style="color:#f92672">.&lt;/span>register_namespace(&lt;span style="color:#e6db74">&amp;#39;fe&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;http://foo.com/engine&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ET&lt;span style="color:#f92672">.&lt;/span>register_namespace(&lt;span style="color:#e6db74">&amp;#39;mp&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;http://foo.com/mapper&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 書き換え処理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree&lt;span style="color:#f92672">.&lt;/span>write(fileName, &lt;span style="color:#e6db74">&amp;#39;UTF-8&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="最後に">最後に
&lt;/h2>&lt;p>コードの量もそんなに長くないし、ちゃんとパーシングで要素を捉えているのでシェルスクリプトに比べ安全な書き方になっています。それにタグによってコンポーネントを区別しているので、コンポーネントを数に変動があってもそのまま使えるという長所がありますね。タグに名前空間があると初期設定と書き込み直前にその処理が必要となるので少し面倒な部分はありますが&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>、確かにシェルスクリプトに比べ維持補修の面で手間がかからなくなったので満足できるコードを書けたと思います。速度も直接測定してみた訳ではないですが、相当早かったです(ただ単にPythonは遅いだろうという自分の偏見が問題だったかもしれません)。いやーPythonいいですね。&lt;/p>
&lt;p>何よりもメインの関数やクラスを省略しても、本当にスクリプトぽい書き方でもちゃんと意図通りに動くということが素晴らしいですね。これからもLinux環境で簡単な反復作業を自動化したいという場合には、皆さんもぜひPythonを使ってみてくださいとオススメしたいくらいです。とても簡単な言語なので、これからもどんどん使って色々やってみたいなと思います。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>例えば、yumで問題が発生しています。これはyumの実行環境を変える方法(/usr/bin/yumの設定を参照してください)もありますが、どれがPython2を使うかいちいち確認はできないのであまりおすすめしたくはない方法です。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>特に最後の方の&lt;code>ET.register_namespace()&lt;/code>がないと、名前空間が勝手に変わってしまいます。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>