<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>string on Korean-man in Tokyo</title><link>https://retheviper.github.io/tags/string/</link><description>Recent content in string on Korean-man in Tokyo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://retheviper.github.io/tags/string/index.xml" rel="self" type="application/rss+xml"/><item><title>KotlinのString実装を覗く〜whitespace編〜</title><link>https://retheviper.github.io/posts/kotlin-whitespace/</link><pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/kotlin-whitespace/</guid><description>&lt;img src="https://retheviper.github.io/images/kotlin.jpg" alt="Featured image of post KotlinのString実装を覗く〜whitespace編〜" />&lt;p>Kotlin(JVM)は、コンパイルした結果がJVMのバイトコードになります。Javaで書かれたライブラリをそのままKotlinで利用できるのはそのためですね。これはKotliのライブラリに対しても同じなので、スタンダードライブラリを覗くとJavaの機能に依存しているところも少なくないです。&lt;/p>
&lt;p>ただ、KotlinがコンパイルしたらJVMのバイトコードになるということは、単純にKotlinが「書き方が違うJava」であるという意味ではないです。これはKotlinがJavaと言語スペックが違うという点もありますが、JVMだけでなく、JavaScriptやネイティブコードにコンパイルされることも想定してデザインされているので、スタンダードライブラリスタンダードライブラリはプラットフォームに合わせて違う実装になっています。そしてJVMだとしてもJavaのAPIをそのまま利用しているわけではありません。&lt;/p>
&lt;p>Kotlinのこういう構造は、内部のソースコードを見るとはっきりします。スタンダードライブラリの一部メソッドやクラスには&lt;code>expect&lt;/code>と&lt;code>actual&lt;/code>というキーワードが使われていますが、これらはJavaのinheritanceと似ているようなものです。Javaでは&lt;code>interface&lt;/code>で定義したメソッドを、それを継承したクラスで&lt;code>override&lt;/code>で実装して使うことになりますね。同じく、Kotlinでは&lt;code>expect&lt;/code>として定義された機能をプラットフォームに合わせて&lt;code>actual&lt;/code>で実装しているわけです。&lt;/p>
&lt;p>また、KotlinのスタンダードライブラリはJavaと一見同じようなものに見えるとしても、実際は違うケースもあります。&lt;code>actual&lt;/code>によって実装されたコードがKotlinに合わせて、書かれているからですね。なので、Kotlinのスタンダードライブラリに対しては「Javaと同じだろう」という認識をするのは危険な可能性もあります。&lt;/p>
&lt;p>今回はそういうことで、文字列のwhitespaceに関しての機能を、スタンダードライブラリのソースコードを中心に見ていきたいと思います。&lt;/p>
&lt;h2 id="whitespaceの判定">whitespaceの判定&lt;/h2>
&lt;p>とある文字列が意味のある(有効な)データであるかどうかを判定する方法の一つは、その文字列がただの空白であるかどうかを判定することです。つまり、そもそもなんのデータもなかったり、whitespaceだけでないかというチェックをするということですね。&lt;/p>
&lt;p>こういう場合の判定はKotlinのスタンダードライブラリで簡単に行うことができます。KotlinではStringのメソッドとして基本的に以下の二つを提供しています。&lt;/p>
&lt;ul>
&lt;li>&lt;code>isEmpty()&lt;/code>&lt;/li>
&lt;li>&lt;code>isBlank()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Java 11以降でもこれらと同名のメソッドが存在しているので、一見そのままの感覚で良さそうにも見えます。しかし、Kotlinではこれらのメソッドがまず&lt;code>kotlin.text.Strings&lt;/code>から呼ばれるものとされています。JavaのAPIをそのまま使っているわけではないので、処理も違う可能性があるという推測ができますね。&lt;/p>
&lt;p>ここで前者の場合、文字列が単純になんのデータも持ってないかどうかに対する判定をおこないます。実際のソースコードを見ると、文字列の長さだけをチェックしているのを確認できます。&lt;/p>
&lt;p>ちなみにJavaでは&lt;code>String&lt;/code>は&lt;code>CharSequence&lt;/code>を継承していますが、Kotlinとしてもライブラリは違えどそういう継承関係は一緒です。なので、Kotlinでは&lt;code>String&lt;/code>のメンバーでありながらも&lt;code>CharSequence&lt;/code>の関数として書かれています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">public&lt;/span> &lt;span style="color:#ff79c6">inline&lt;/span> &lt;span style="color:#ff79c6">fun&lt;/span> &lt;span style="color:#50fa7b">CharSequence&lt;/span>.isEmpty(): Boolean = length &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>後者の場合は、文字列にwhitespaceまで含めているのかを判定します。以下のコードを見ると、何をやっているかが明確でしょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">public&lt;/span> &lt;span style="color:#ff79c6">actual&lt;/span> &lt;span style="color:#ff79c6">fun&lt;/span> &lt;span style="color:#50fa7b">CharSequence&lt;/span>.isBlank(): Boolean = length &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">||&lt;/span> indices.all { &lt;span style="color:#ff79c6">this&lt;/span>[&lt;span style="color:#ff79c6">it&lt;/span>].isWhitespace() }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>isBlank()&lt;/code>で呼び出している&lt;code>isWhitespace()&lt;/code>は、以下のような実装となっています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">public&lt;/span> &lt;span style="color:#ff79c6">actual&lt;/span> &lt;span style="color:#ff79c6">fun&lt;/span> &lt;span style="color:#50fa7b">Char&lt;/span>.isWhitespace(): Boolean = &lt;span style="color:#50fa7b">Character&lt;/span>.isWhitespace(&lt;span style="color:#ff79c6">this&lt;/span>) &lt;span style="color:#ff79c6">||&lt;/span> &lt;span style="color:#50fa7b">Character&lt;/span>.isSpaceChar(&lt;span style="color:#ff79c6">this&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Kotlinの&lt;code>Char.isWhitespace()&lt;/code>は最終的に&lt;code>Character.isWhitespace()&lt;/code>と&lt;code>Character.isSpaceChar()&lt;/code>を使って判定することになります。前者の場合はUnicodeのwhitespaceに当てはまるか、後者の場合はUnicodeのspace(改行コードなど)に当てはまるかを判定するJavaのAPIです。ここでわかるように、特集なケースでなければなるべく&lt;code>isEmpty()&lt;/code>を使った方が文字列をチェックする時に良いでしょう。&lt;/p>
&lt;h2 id="whitespaceの削除">whitespaceの削除&lt;/h2>
&lt;p>文字列が単純に意味のあるデータを持っているかどうかを判定するには、前述通り&lt;code>isEmpty()&lt;/code>を使うと良いですが、文字列にwhitespaceだけでなく、意味のあるデータも混在する場合もありますね。こういう時は前後のwhitespaceを取り除きたくなります。&lt;/p>
&lt;p>Javaでは、文字列の前後のwhitespaceを消去する方法として&lt;code>trim()&lt;/code>と&lt;code>strip()&lt;/code>がありました。前者は昔ながらのもので、全角のwhitespaceを検知できなく、性能の問題もあるのでJava 11以降は後者を使うことが推奨されています。&lt;/p>
&lt;p>ただ、Kotlinの場合は少し都合が違います。Kotlinでは基本的に&lt;code>trim()&lt;/code>だけを使うことになります。まずは&lt;code>trim()&lt;/code>の実装をみていきましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">public&lt;/span> &lt;span style="color:#ff79c6">inline&lt;/span> &lt;span style="color:#ff79c6">fun&lt;/span> &lt;span style="color:#50fa7b">String&lt;/span>.trim(): String = (&lt;span style="color:#ff79c6">this&lt;/span> &lt;span style="color:#ff79c6">as&lt;/span> CharSequence).trim().toString()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>まず&lt;code>String&lt;/code>としては、&lt;code>CharSequence&lt;/code>にアップキャストしてその&lt;code>trim()&lt;/code>を呼び出すことにしています。そのあとは単純に&lt;code>toString()&lt;/code>で返すだけですね。&lt;/p>
&lt;p>続いて、&lt;code>String&lt;/code>で呼ばれている&lt;code>CharSequence&lt;/code>側の&lt;code>trim()&lt;/code>をみていきましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">public&lt;/span> &lt;span style="color:#ff79c6">fun&lt;/span> &lt;span style="color:#50fa7b">CharSequence&lt;/span>.trim(): CharSequence = trim(Char&lt;span style="color:#ff79c6">::&lt;/span>isWhitespace)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここでは、オーバロードした他の&lt;code>trim()&lt;/code>に&lt;code>isWhitespace()&lt;/code>をメソッドレファレンスとして渡しているのがわかります。&lt;code>Boolean&lt;/code>が戻り値なので、引数は&lt;code>Predicate&lt;/code>であると推測できますね。続けて、こちらで呼び出している&lt;code>trim(predicate)&lt;/code>の方を確認します。こちらのコードは以下の通りです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">public&lt;/span> &lt;span style="color:#ff79c6">inline&lt;/span> &lt;span style="color:#ff79c6">fun&lt;/span> &lt;span style="color:#50fa7b">CharSequence&lt;/span>.trim(predicate: (Char) &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> Boolean): CharSequence {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">var&lt;/span> startIndex = &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">var&lt;/span> endIndex = length - &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">var&lt;/span> startFound = &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (startIndex &lt;span style="color:#ff79c6">&amp;lt;=&lt;/span> endIndex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">val&lt;/span> index = &lt;span style="color:#ff79c6">if&lt;/span> (!startFound) startIndex &lt;span style="color:#ff79c6">else&lt;/span> endIndex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">val&lt;/span> match = predicate(&lt;span style="color:#ff79c6">this&lt;/span>[index])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (!startFound) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (!match)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startFound = &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startIndex &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (!match)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endIndex &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> subSequence(startIndex, endIndex + &lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここまできてやっと実際の処理がでました。&lt;code>CharSequence&lt;/code>をループしながら左(start)から右の方にwhitespaceを探し、初めてwhitespaceでない文字を見つけたら右(end)から左の方にループしながら繰り返すという処理ですね。意外と単純ですが、効率的な処理です。&lt;/p>
&lt;p>そしてその処理での判断基準が&lt;code>isWhitespace()&lt;/code>になっているわけですが、先に確認している通りこちらは最終的にJavaのAPIを呼ぶことになっているので、&lt;code>trim()&lt;/code>でも十分Unicodeに定義されてあるwhitespaceやspaceまでを削除してくれると推論できます。なので、Javaとは違ってあえて&lt;code>strip()&lt;/code>を使う必要はなさそうです。&lt;/p>
&lt;p>また、&lt;code>trim()&lt;/code>は文字列の前後のwhitespaceを削除しますが、場合によっては前方のみ、後方のみで分けて使いたい場合もあるかもしれません。その時は、以下のようなことができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> string = &lt;span style="color:#f1fa8c">&amp;#34; string &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 左のみtrim
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>println(string.trimStart()) &lt;span style="color:#6272a4">// &amp;#34;string &amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 右のみtrim
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>println(string.trimEnd()) &lt;span style="color:#6272a4">// &amp;#34; string&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これらのメソッドは引数として&lt;code>Predicate&lt;/code>を渡すこともできるので、他の条件を自前で書く必要がある場合にはそちらを使えますね。&lt;/p>
&lt;p>他にも、whitespaceではない、前後の特定の文字(prefix、suffix)を削除してたい場合は以下のメソッドが提供されています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> string = &lt;span style="color:#f1fa8c">&amp;#34;--hello--&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// prefixのみ削除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>println(string.removePrefix(&lt;span style="color:#f1fa8c">&amp;#34;--&amp;#34;&lt;/span>)) &lt;span style="color:#6272a4">// &amp;#34;hello--&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// suffixのみ削除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>println(string.removeSuffix(&lt;span style="color:#f1fa8c">&amp;#34;--&amp;#34;&lt;/span>)) &lt;span style="color:#6272a4">// &amp;#34;--hello&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 前後を削除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>println(string.removeSurrounding(&lt;span style="color:#f1fa8c">&amp;#34;--&amp;#34;&lt;/span>)) &lt;span style="color:#6272a4">// &amp;#34;hello&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="改行を削除">改行を削除&lt;/h3>
&lt;p>改行が文字列の前後に入っていれば&lt;code>trim()&lt;/code>で十分ですが、文字列の中に改行が含まれていて、それを変えたい場合もありますね。例えばJSONをログに一行で出力したいだったり、以下のようなMulitiline Stringを一行にまとめたい場合です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">val&lt;/span> string = &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> Hello
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> World
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Intellijだと自動的に&lt;code>trimIndent()&lt;/code>をつけてくれますが、これはあくまでインデントに関与するものであって、中の改行まではtrimしてくれないです。こういう場合は、KotlinでもJavaでも対応するメソッドは特にないので、自分で処理を書くしかないですね。例えば、以下のようなコードが使えるでしょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">fun&lt;/span> &lt;span style="color:#50fa7b">String&lt;/span>.stripLine() = replace(&lt;span style="color:#50fa7b">System&lt;/span>.lineSeparator(), &lt;span style="color:#f1fa8c">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ただ、Javaでも13から&lt;a class="link" href="https://openjdk.java.net/jeps/355" target="_blank" rel="noopener"
>Text Block&lt;/a>が導入されているので、今後はJavaのAPIの方で上記のようなメソッドが追加されることを期待できるかもしれません。&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>最初に&lt;code>expect&lt;/code>と&lt;code>actual&lt;/code>の話をしましたが、これらのキーワードは&lt;a class="link" href="https://kotlinlang.org/docs/multiplatform.html" target="_blank" rel="noopener"
>Kotlin Multiplatform&lt;/a>でもっとも重要な概念です。Kotlinで書いたコードをさまざまなプラットフォームで共有できるようにすることを目的としているので、こういう構造になっているのは自然ですね。なので、Kotlin/JVMだけでなく、他のことを試したい方にはとりあえず理解しておく必要があるキーワードだと思います。ちょっと独特なだけで、実体は単純なので、理解は簡単でしょう。&lt;/p>
&lt;p>また、KotlinのStringに関しては、&lt;a class="link" href="https://youtu.be/n4WBip822A8" target="_blank" rel="noopener"
>JetBrains公式YouTubeチャンネルの動画&lt;/a>で簡単に説明しているので、Kotlinで開発をしている方なら一度は参考にした方が良いかもしれません。&lt;/p>
&lt;p>他に、&lt;code>strip()&lt;/code>をあえて使う必要はないと言いましたが、実際Kotlinの最新バージョンである1.5.0でも&lt;code>strip()&lt;/code>は&lt;code>deprecated&lt;/code>になっていて、以下のようなコメントがついているので、次のバージョンで正式対応するまでは使わない方が良いですね。&lt;/p>
&lt;blockquote>
&lt;p>&amp;lsquo;strip(): String!&amp;rsquo; is deprecated. This member is not fully supported by Kotlin compiler, so it may be absent or have different signature in next major version&lt;/p>
&lt;/blockquote>
&lt;p>こういうケースでもわかるように、KotlinがJavaと100%互換性があると言い切れない側面もあるのではと思います。なので、JavaからKotlinに移行した場合(実際のコードであれ、開発者自身のスキルであれ)には、一度注意深くスタンダードライブラリの説明を読む必要があるかもしれません。&lt;/p>
&lt;p>では、また！&lt;/p></description></item><item><title>今更な文字列操作の話</title><link>https://retheviper.github.io/posts/java-string-concat-and-split/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/java-string-concat-and-split/</guid><description>&lt;img src="https://retheviper.github.io/images/java.jpg" alt="Featured image of post 今更な文字列操作の話" />&lt;p>もうこれで3回目の、「今更なシリーズ」です。このシリーズ自体は、またベンチマークとともに戻ってきました。さて、今回のテーマはJavaによる文字列の操作となりますが、その中でも&lt;code>連結(Join)&lt;/code>と&lt;code>分割(split)&lt;/code>について述べたいと思います。最初は単純に、文字列の分割は&lt;code>String.split()&lt;/code>でやるしかないのに、連結の場合は&lt;code>String.join()&lt;/code>とか&lt;code>Collectors.joining()&lt;/code>とか、色々あるなと思ったのがきっかけです。同じことが複数のAPIでできるのは、単純に&lt;a class="link" href="https://ja.wikipedia.org/wiki/%e7%b3%96%e8%a1%a3%e6%a7%8b%e6%96%87" target="_blank" rel="noopener"
>シンタックスシュガー&lt;/a>な場合もありますが、実際は全く実装が違うケースもありますね。特に、Javaのように長い間使われてきた言語こそそのようなケースが多いかと思います。&lt;/p>
&lt;p>また、単純なシンタックスシュガーに近い場合でも、その前後のコードや可読性など、周りの様相を考慮して適切なものを選ぶ必要がある場合もあります。例えば、以前紹介したInputStreamの&lt;code>transferTo()&lt;/code>がそのようなケースですね。なので、一つのAPIを使う場合は、できればその実装がどうなっているかを確認してみるのも、良いコードを書くための工夫となるのではないかと思います。&lt;/p>
&lt;p>ではでは、早速本題に入りましょう。まずは文字列の連結からです。&lt;/p>
&lt;h2 id="concatenating">Concatenating&lt;/h2>
&lt;p>文字列の連結といっても、色々なケースがありますね。そしてそういった場合は、&lt;code>String.concat()&lt;/code>、&lt;code>String.format()&lt;/code>などさまざまな方法があって、それら全部に対してシナリオを想定し検証するということは難しいと思います。なので今回は、「文字列の配列もしくはCollectionを、区切り文字でつないで一つの文字列にする」というケース一つに限定して述べたいと思います。&lt;/p>
&lt;p>Javaでの区切り文字を使った文字列の連結には、主に以下のような方法が考えられます。これら一つ一つのAPIの特徴と、実際の使い方を持って比較して見た後、いつもの通りベンチマークをするということで性能を測定することとします。(&lt;code>+&lt;/code>を使って文字列を繋ぐケースは、あまりよろしくないと思うのでケース外としています)&lt;/p>
&lt;ul>
&lt;li>&lt;code>String.join()&lt;/code>&lt;/li>
&lt;li>&lt;code>StringJoiner&lt;/code>&lt;/li>
&lt;li>&lt;code>StringBuffer&lt;/code>&lt;/li>
&lt;li>&lt;code>StringBuilder&lt;/code>&lt;/li>
&lt;li>&lt;code>Collectors.joining()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="stringbuffer--stringbuilder">StringBuffer || StringBuilder&lt;/h3>
&lt;p>純粋に、Collectionや配列になっている複数の文字列を連結する場合もあるとは思いますが、普通、文字列の連結が必要となる場合では、「とある規則によって」という条件がつくケースが多いかなと思います。例えば、ダッシュ(-)、アンダースコア(_)、カンマ(,)などで並ぶようにですね。そしてこのような規則がある場合、&lt;code>StringBuffer&lt;/code>や&lt;code>StringBuilder&lt;/code>を使った方法は他と比べて少し不利です。なぜなら、最後に区切り文字(delimiter)が付かないように制御するにはかなりコードの書き方に注意しなければならないからです。以下のコードが、そのようなケースです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// StringBufferを使う例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> list &lt;span style="color:#ff79c6">=&lt;/span> List&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String delimiter &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>StringBuffer buffer &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> StringBuffer&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Listの要素と区切り文字を足す
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>String string &lt;span style="color:#ff79c6">:&lt;/span> list&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>string&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>delimiter&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String result &lt;span style="color:#ff79c6">=&lt;/span> buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// A, B, C,
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あえて、文字列の末尾に区切り文字が付かないようにするとしたら、おそらくこういうコードを書く必要があるでしょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> list &lt;span style="color:#ff79c6">=&lt;/span> List&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String delimiter &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> limit &lt;span style="color:#ff79c6">=&lt;/span> list&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">size&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span> 1&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>StringBuffer buffer &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> StringBuffer&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Listの要素と区切り文字を足す(最後のインデックスの前まで)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> 0&lt;span style="color:#ff79c6">;&lt;/span> i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> limit&lt;span style="color:#ff79c6">;&lt;/span> i&lt;span style="color:#ff79c6">++)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>list&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>i&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>delimiter&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 最後の要素を足す
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>list&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>limit&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String result &lt;span style="color:#ff79c6">=&lt;/span> buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// A, B, C
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>こういう問題があるのに比べて、他の方法(&lt;code>String.join()&lt;/code>、&lt;code>StringJoiner&lt;/code>、&lt;code>Collectors.joining()&lt;/code>)は、区切り文字が最後の要素の後に付かないので、よりシンプルなコードで書けるというメリットがありますね。なので、結論として&lt;code>StringBuffer&lt;/code>や&lt;code>StringBuilder&lt;/code>は、少なくとも「とある規則によって」複数の文字列を連結する場合には可読性という観点からしてあまり良い選択肢ではないということがわかります。&lt;/p>
&lt;h3 id="stringjoiner">StringJoiner&lt;/h3>
&lt;p>&lt;code>StringBuffer&lt;/code>と&lt;code>StringBuilder&lt;/code>ではループで文字列を連結して行くので、ループの中で条件分岐など他の処理も必要な場合に使えるのでは？と思われるかもしれません。しかし、そういう場合でも、&lt;code>StringJoiner&lt;/code>を使ったほうが良いですね。なぜなら、使い方はほぼ変わらなく、特に操作をしなくても常に末尾に区切り文字が付かないからです。以下は、&lt;code>StringJoiner&lt;/code>のもっともベーシックな使い方のコードとなります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> list &lt;span style="color:#ff79c6">=&lt;/span> List&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 区切り文字を指定してインスタンスを作る
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>StringJoiner joiner &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> StringJoiner&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// あとは要素を足していく
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>String string &lt;span style="color:#ff79c6">:&lt;/span> list&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> joiner&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">add&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>string&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String result &lt;span style="color:#ff79c6">=&lt;/span> joiner&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// A, B, C
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、&lt;code>StringJoiner&lt;/code>を使った場合は、PrefixとSuffixの指定も可能です。これらを指定した場合、文字列の先頭と末尾に指定したPrefixとSuffixが付くようになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> list &lt;span style="color:#ff79c6">=&lt;/span> List&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 区切り文字とPrefix、Suffixまで指定する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>StringJoiner joiner &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> StringJoiner&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;[&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;]&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>String string &lt;span style="color:#ff79c6">:&lt;/span> list&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> joiner&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">add&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>string&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String result &lt;span style="color:#ff79c6">=&lt;/span> joiner&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// [A, B, C]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使い方だけ見ても、区切り文字を持って文字列を繋ぐ場合は&lt;code>StringBuffer&lt;/code>や&lt;code>StringBuilder&lt;/code>より&lt;code>StringJoiner&lt;/code>の方がより簡単であるということが分かります。&lt;/p>
&lt;h4 id="番外stringjoinerの実装">番外：StringJoinerの実装&lt;/h4>
&lt;p>ついでに、StringJoinerはどんなコードで書かれているかを見ていきたいと思います。まずは&lt;code>add()&lt;/code>ですが、これは面白くも、&lt;code>ArrayList&lt;/code>の実装と似たような感じになっています。&lt;code>StringJoiner&lt;/code>クラスはフィールドとして&lt;code>String[]&lt;/code>を持っていて、&lt;code>add()&lt;/code>がよばれる度にそれより大きいコピーを作っていく形です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> StringJoiner &lt;span style="color:#50fa7b">add&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>CharSequence newElement&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> String elt &lt;span style="color:#ff79c6">=&lt;/span> String&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">valueOf&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>newElement&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>elts &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elts &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> String&lt;span style="color:#ff79c6">[&lt;/span>8&lt;span style="color:#ff79c6">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>size &lt;span style="color:#ff79c6">==&lt;/span> elts&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elts &lt;span style="color:#ff79c6">=&lt;/span> Arrays&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">copyOf&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>elts&lt;span style="color:#ff79c6">,&lt;/span> 2 &lt;span style="color:#ff79c6">*&lt;/span> size&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len &lt;span style="color:#ff79c6">+=&lt;/span> delimiter&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len &lt;span style="color:#ff79c6">+=&lt;/span> elt&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elts&lt;span style="color:#ff79c6">[&lt;/span>size&lt;span style="color:#ff79c6">++]&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> elt&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そして&lt;code>toString()&lt;/code>では、フィールドの&lt;code>String[]&lt;/code>をループしながら、区切り文字とともに繋げて行くのが分かります。少し変わっているのは、性能を意識しているからか、&lt;code>char[]&lt;/code>として文字列をつめた後から新しく&lt;code>String&lt;/code>のインスタンスを作って返しているというところですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> String &lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> String&lt;span style="color:#ff79c6">[]&lt;/span> elts &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">elts&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>elts &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> emptyValue &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> emptyValue&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> size &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">size&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> addLen &lt;span style="color:#ff79c6">=&lt;/span> prefix&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> suffix&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>addLen &lt;span style="color:#ff79c6">==&lt;/span> 0&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> compactElts&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> size &lt;span style="color:#ff79c6">==&lt;/span> 0 &lt;span style="color:#ff79c6">?&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> elts&lt;span style="color:#ff79c6">[&lt;/span>0&lt;span style="color:#ff79c6">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> String delimiter &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">delimiter&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span>&lt;span style="color:#ff79c6">[]&lt;/span> chars &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> &lt;span style="color:#8be9fd">char&lt;/span>&lt;span style="color:#ff79c6">[&lt;/span>len &lt;span style="color:#ff79c6">+&lt;/span> addLen&lt;span style="color:#ff79c6">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> k &lt;span style="color:#ff79c6">=&lt;/span> getChars&lt;span style="color:#ff79c6">(&lt;/span>prefix&lt;span style="color:#ff79c6">,&lt;/span> chars&lt;span style="color:#ff79c6">,&lt;/span> 0&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>size &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> 0&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#ff79c6">+=&lt;/span> getChars&lt;span style="color:#ff79c6">(&lt;/span>elts&lt;span style="color:#ff79c6">[&lt;/span>0&lt;span style="color:#ff79c6">],&lt;/span> chars&lt;span style="color:#ff79c6">,&lt;/span> k&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> 1&lt;span style="color:#ff79c6">;&lt;/span> i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> size&lt;span style="color:#ff79c6">;&lt;/span> i&lt;span style="color:#ff79c6">++)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#ff79c6">+=&lt;/span> getChars&lt;span style="color:#ff79c6">(&lt;/span>delimiter&lt;span style="color:#ff79c6">,&lt;/span> chars&lt;span style="color:#ff79c6">,&lt;/span> k&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#ff79c6">+=&lt;/span> getChars&lt;span style="color:#ff79c6">(&lt;/span>elts&lt;span style="color:#ff79c6">[&lt;/span>i&lt;span style="color:#ff79c6">],&lt;/span> chars&lt;span style="color:#ff79c6">,&lt;/span> k&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#ff79c6">+=&lt;/span> getChars&lt;span style="color:#ff79c6">(&lt;/span>suffix&lt;span style="color:#ff79c6">,&lt;/span> chars&lt;span style="color:#ff79c6">,&lt;/span> k&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> String&lt;span style="color:#ff79c6">(&lt;/span>chars&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stringjoin">String.join()&lt;/h3>
&lt;p>&lt;code>String.join()&lt;/code>は、&lt;code>InputStream.transferTo()&lt;/code>のように、あくまでシンタックスシュガーとして存在するものだと言えます。以下は実際のコードです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">static&lt;/span> String &lt;span style="color:#50fa7b">join&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>CharSequence delimiter&lt;span style="color:#ff79c6">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Iterable&lt;span style="color:#ff79c6">&amp;lt;?&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">extends&lt;/span> CharSequence&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> elements&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Objects&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">requireNonNull&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>delimiter&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Objects&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">requireNonNull&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>elements&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringJoiner joiner &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> StringJoiner&lt;span style="color:#ff79c6">(&lt;/span>delimiter&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>CharSequence cs&lt;span style="color:#ff79c6">:&lt;/span> elements&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> joiner&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">add&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>cs&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> joiner&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>引数に対するNullチェック以外は、Prefix・Suffixなしの&lt;code>StringJoiner&lt;/code>での連結になっているということを確認できます。なので、より短いコードを書きたい場合は&lt;code>StringJoiner&lt;/code>を使うよりも、こちらの方が便利ではありますね。&lt;/p>
&lt;h3 id="collectorsjoining">Collectors.joining()&lt;/h3>
&lt;p>文字列の連結で&lt;code>Stream&lt;/code>を利用する場合、他にも&lt;code>filter()&lt;/code>、&lt;code>map()&lt;/code>、&lt;code>peek()&lt;/code>など、さまざまな処理をメソッドチェイニングで書けるというところが魅力的ですね。個人的には、処理の役割と目的・影響範囲が明確に見えるので、&lt;code>Stream&lt;/code>による処理を好んで使っています。ただ、以前のポストでも書いたことがありますが、多くの場合に&lt;code>Stream&lt;/code>は伝統的なループより性能面で不利ですので、時と場合によって適切に選ぶべきでしょう。&lt;/p>
&lt;p>さて、そんな&lt;code>Stream&lt;/code>ですが、中の実装はどうなっているのでしょうか。&lt;code>Collectors.joining()&lt;/code>の場合、以下のような実装となっています。結局は、&lt;code>StringJoiner&lt;/code>を内部で使っているだけですので、&lt;code>String.join()&lt;/code>・&lt;code>StringJoiner&lt;/code>と比べては、&lt;code>Stream&lt;/code>によるコードの変化や性能に影響されるだけと言えるでしょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">static&lt;/span> Collector&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>CharSequence&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#ff79c6">?,&lt;/span> String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#50fa7b">joining&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>CharSequence delimiter&lt;span style="color:#ff79c6">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CharSequence prefix&lt;span style="color:#ff79c6">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CharSequence suffix&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> CollectorImpl&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> StringJoiner&lt;span style="color:#ff79c6">(&lt;/span>delimiter&lt;span style="color:#ff79c6">,&lt;/span> prefix&lt;span style="color:#ff79c6">,&lt;/span> suffix&lt;span style="color:#ff79c6">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringJoiner&lt;span style="color:#ff79c6">::&lt;/span>add&lt;span style="color:#ff79c6">,&lt;/span> StringJoiner&lt;span style="color:#ff79c6">::&lt;/span>merge&lt;span style="color:#ff79c6">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringJoiner&lt;span style="color:#ff79c6">::&lt;/span>toString&lt;span style="color:#ff79c6">,&lt;/span> CH_NOID&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="tostring">toString()&lt;/h3>
&lt;p>実は、Collectionの場合(&lt;code>List&amp;lt;String&amp;gt;&lt;/code>)は、もっと簡単に文字列を作る方法がありますね。&lt;code>toString()&lt;/code>を呼ぶことで、簡単にカンマ区切りの文字列が出来上がります。ただ、そうして文字列を作った場合、先頭と末尾に&lt;code>[]&lt;/code>が入ってしまうので、場合によってはそれらを取り消すか、&lt;code>substring()&lt;/code>で抽出するかの追加的な処理が必要となりますね。以下は、&lt;code>substring()&lt;/code>を利用して&lt;code>[]&lt;/code>の中の文字列だけを切り取るサンプルとなります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> list &lt;span style="color:#ff79c6">=&lt;/span> List&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String toString &lt;span style="color:#ff79c6">=&lt;/span> list&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// [A, B, C]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>String result &lt;span style="color:#ff79c6">=&lt;/span> toString&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">substring&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>1&lt;span style="color:#ff79c6">,&lt;/span> toString&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span> 1&lt;span style="color:#ff79c6">);&lt;/span> &lt;span style="color:#6272a4">// A, B, C
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、もし区切り文字がカンマではない場合は、とりあえず&lt;code>toString()&lt;/code>で文字列に変換した結果の文字列から、更に&lt;code>replace()&lt;/code>を呼び出し、区切り文字だけを入れ替えるというやり方でも対応はできます。ただ、これは非常に非効率的なやり方ではあります。なぜなら、&lt;code>replace()&lt;/code>のコードをみると、結局はループの中で&lt;code>StrinbBuilder&lt;/code>を使って新しく作り出すような構造となっているからです。実際のコードは、以下の通りです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> String &lt;span style="color:#50fa7b">replace&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>CharSequence target&lt;span style="color:#ff79c6">,&lt;/span> CharSequence replacement&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String tgtStr &lt;span style="color:#ff79c6">=&lt;/span> target&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String replStr &lt;span style="color:#ff79c6">=&lt;/span> replacement&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> j &lt;span style="color:#ff79c6">=&lt;/span> indexOf&lt;span style="color:#ff79c6">(&lt;/span>tgtStr&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>j &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 0&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tgtLen &lt;span style="color:#ff79c6">=&lt;/span> tgtStr&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> tgtLen1 &lt;span style="color:#ff79c6">=&lt;/span> Math&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">max&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>tgtLen&lt;span style="color:#ff79c6">,&lt;/span> 1&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> thisLen &lt;span style="color:#ff79c6">=&lt;/span> length&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> newLenHint &lt;span style="color:#ff79c6">=&lt;/span> thisLen &lt;span style="color:#ff79c6">-&lt;/span> tgtLen &lt;span style="color:#ff79c6">+&lt;/span> replStr&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>newLenHint &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 0&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">throw&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> OutOfMemoryError&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder sb &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> StringBuilder&lt;span style="color:#ff79c6">(&lt;/span>newLenHint&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> 0&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">do&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> i&lt;span style="color:#ff79c6">,&lt;/span> j&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>replStr&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#ff79c6">=&lt;/span> j &lt;span style="color:#ff79c6">+&lt;/span> tgtLen&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span> &lt;span style="color:#ff79c6">while&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>j &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> thisLen &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>j &lt;span style="color:#ff79c6">=&lt;/span> indexOf&lt;span style="color:#ff79c6">(&lt;/span>tgtStr&lt;span style="color:#ff79c6">,&lt;/span> j &lt;span style="color:#ff79c6">+&lt;/span> tgtLen1&lt;span style="color:#ff79c6">))&lt;/span> &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> 0&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> sb&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> i&lt;span style="color:#ff79c6">,&lt;/span> thisLen&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>少なくとも区切り文字がカンマではない場合は、&lt;code>toString()&lt;/code>と&lt;code>replace()&lt;/code>での文字列の生成よりは、他の方法をとったほうが性能面では有利ではないか、という推測が可能です。もちろん、要素数という変数があるので、実際の性能は測ってみないとわからないものですが…&lt;/p>
&lt;h3 id="ベンチマークしてみる1">ベンチマークしてみる(1)&lt;/h3>
&lt;p>では、文字列を連結するために使える色々なAPIと、その特徴を簡単に把握できたので、次に確認したいのは、やはり性能です。特に気になるのは、&lt;code>String.join()&lt;/code>や&lt;code>Collectors.joining()&lt;/code>でも結局は内部で&lt;code>StringJoiner&lt;/code>を使っているというところです。それはつまり、&lt;code>StringBuffer&lt;/code>や&lt;code>StringBuilder&lt;/code>よりも&lt;code>StringJoiner&lt;/code>が性能で有利だから、でしょうか。&lt;/p>
&lt;p>これらのAPIを利用して、実際のアプリケーションに使われるビジネスロジックのコードを書く立場としては、それはコードを簡単に書ける方が良いのは当然ですが、そもそもこういうAPIの場合は、手間を省けるために性能は良くても複雑なコードで実装する可能性もあるのですので、疑問になります。しかも、多くの場合、文字列の操作では&lt;code>StringBuilder&lt;/code>が早いと言われていますので、ますます性能差というのが気になってきます。なので、いつもの通りにベンチマークを実施してみました。&lt;/p>
&lt;p>ベンチマークは、カンマ区切りで文字列を連結する例として作成しています。以下がそのコードです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>@State&lt;span style="color:#ff79c6">(&lt;/span>Scope&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">Benchmark&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">class&lt;/span> &lt;span style="color:#50fa7b">StringConcatTest&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">private&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">static&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> String DELIMITER &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">private&lt;/span> List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> target&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Setup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">init&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> DecimalFormat format &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> DecimalFormat&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;0000000&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">target&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> IntStream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">rangeClosed&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>0&lt;span style="color:#ff79c6">,&lt;/span> 1000000&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">mapToObj&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> format&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">format&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>i&lt;span style="color:#ff79c6">)).&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Benchmark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> Blackhole bh&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> String toString &lt;span style="color:#ff79c6">=&lt;/span> target&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bh&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">consume&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>toString&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">substring&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>1&lt;span style="color:#ff79c6">,&lt;/span> toString&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span> 1&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Benchmark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">stringJoin&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> Blackhole bh&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bh&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">consume&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>String&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">join&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>DELIMITER&lt;span style="color:#ff79c6">,&lt;/span> target&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Benchmark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">collectorsJoining&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> Blackhole bh&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bh&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">consume&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>target&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">().&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">joining&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>DELIMITER&lt;span style="color:#ff79c6">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Benchmark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">stringBuffer&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> Blackhole bh&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> StringBuffer buffer &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> StringBuffer&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> limit &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">target&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">size&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span> 1&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> 0&lt;span style="color:#ff79c6">;&lt;/span> i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> limit&lt;span style="color:#ff79c6">;&lt;/span> i&lt;span style="color:#ff79c6">++)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">target&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>i&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>DELIMITER&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">target&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>limit&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bh&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">consume&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>buffer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Benchmark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">stringBuilder&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> Blackhole bh&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> StringBuilder builder &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> StringBuilder&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> limit &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">target&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">size&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span> 1&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> 0&lt;span style="color:#ff79c6">;&lt;/span> i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> limit&lt;span style="color:#ff79c6">;&lt;/span> i&lt;span style="color:#ff79c6">++)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> builder&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">target&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>i&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> builder&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>DELIMITER&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> builder&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">append&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">target&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>limit&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bh&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">consume&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>builder&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そして、結果は以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-dos" data-lang="dos">Benchmark Mode Cnt Score Error Units
StringConcatTest.toString thrpt 25 41.445 ± 0.461 ops/s
StringConcatTest.stringJoin thrpt 25 28.396 ± 0.447 ops/s
StringConcatTest.collectorsJoining thrpt 25 31.024 ± 1.313 ops/s
StringConcatTest.stringBuffer thrpt 25 30.570 ± 1.205 ops/s
StringConcatTest.stringBuilder thrpt 25 45.965 ± 1.736 ops/s
&lt;/code>&lt;/pre>&lt;p>この結果からわかるのは、やはり&lt;code>StringBuilder&lt;/code>の性能は優秀ということですね。ただ、よく知られているように、&lt;code>StringBuilder&lt;/code>はマルチスレッドを考慮したAPIではないので、スレッドセーフなAPIを使う必要のある環境であるなら、他のAPIを考慮すべきですね。そのような観点からすると、意外と、誤差範囲を踏まえて考えると&lt;code>String.join()&lt;/code>が&lt;code>Collectors.joining()&lt;/code>と大差ない性能を見せるという結果となりましたが…このような結果だとすると、気軽に&lt;code>Stream&lt;/code>を使っても良さそうな気がします。&lt;/p>
&lt;p>また、&lt;code>toString()&lt;/code>の結果は、やはり早いものとなっていますが、ここで&lt;code>replace()&lt;/code>を挟んだ瞬間性能は半分以下という結果となっています。なので、無理して&lt;code>toString()&lt;/code>を使う必要はあまりないかな、と思いますね。文字列の連結という目的に合うコードかどうかもすぐわからないし…&lt;/p>
&lt;p>もう一つ確かなのは、&lt;code>StringBuffer&lt;/code>はもう使わなくても良さそうということですね。もうレガシーなコードとして残しておいて、これからはなるべく違うAPIを使うべきなのではないかと思います。&lt;/p>
&lt;h2 id="split">Split&lt;/h2>
&lt;p>次に検証したいのは、文字列の分割です。先に述べたのように、文字列の分割は実質、&lt;code>String.split()&lt;/code>しかない状態と言えますね。&lt;code>substring()&lt;/code>でもなんとか分割はできるかもしれませんが、その場合はループと条件分岐なしでは話にならないので、そもそも論外かと思います。&lt;/p>
&lt;p>ただ、ここで注目したいのは分割した後のことです。&lt;code>String.split()&lt;/code>の戻り値は&lt;code>String[]&lt;/code>なので、場合によって&lt;code>Collection&lt;/code>に変えたくなりますね。なので、どちらかというと「配列をListに」する方法の検証ということとなりますが…とりあえずListをStringに変えてみたので、その逆の場合を考えてみるということで受け止めてくださると幸いです。&lt;/p>
&lt;h3 id="arraysaslist">Arrays.asList()&lt;/h3>
&lt;p>配列をListに変えるもっとも簡単な方法は、&lt;code>Arrays.asList()&lt;/code>だと思います。コードも簡単ですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String string &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;A, B, C&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// まずは分割する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>String&lt;span style="color:#ff79c6">[]&lt;/span> array &lt;span style="color:#ff79c6">=&lt;/span> string&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">split&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Listに変える
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> list &lt;span style="color:#ff79c6">=&lt;/span> Arrays&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">asList&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>array&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ただ、こうやって生成したListのインスタンスは、&lt;a class="link" href="https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB" target="_blank" rel="noopener"
>Immutable&lt;/a>となってしまいます。中の要素を操作できないということですね。&lt;/p>
&lt;p>もちろん、これは新しいListのインスタンスに要素をコピーすることで解決できます。もっとも簡単なのは、コンストラクタの引数としてListを渡す方法ですね。なので、「配列をMutableなListにする」もっとも簡単な方法は、おそらく以下のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String string &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;A, B, C&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// まずは分割する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>String&lt;span style="color:#ff79c6">[]&lt;/span> array &lt;span style="color:#ff79c6">=&lt;/span> string&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">split&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Listに変える
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> list &lt;span style="color:#ff79c6">=&lt;/span> Arrays&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">asList&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>array&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// MutableなListのインスタンスを作成する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> mutableList &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> ArrayList&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;(&lt;/span>list&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="arraysstream">Arrays.stream()&lt;/h3>
&lt;p>配列をListにするまたの方法は、&lt;code>Stream&lt;/code>を利用することです。文字列の連結でも言及したことなのですが、&lt;code>Stream&lt;/code>の場合は、&lt;code>map()&lt;/code>や&lt;code>filter()&lt;/code>のような中間操作のメソッドを使えるというメリットがありますね。また、&lt;code>Collectors&lt;/code>のどのメソッドを呼ぶかによって結果として生成されるListがImmutableか、Mutableかを決定できるという面もメリット(可読性という観点で)ではないのかと思います。コードは&lt;code>Arrays.asList()&lt;/code>と比べて少し複雑になっているように見えるかもしれませんが。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String string &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;A, B, C&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// まずは分割する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>String&lt;span style="color:#ff79c6">[]&lt;/span> array &lt;span style="color:#ff79c6">=&lt;/span> string&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">split&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Listに変える(Mutable)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> mutableList &lt;span style="color:#ff79c6">=&lt;/span> Arrays&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>array&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Listに変える(Immutable)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> mutableList &lt;span style="color:#ff79c6">=&lt;/span> Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>array&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toUnmodifiableList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ベンチマークしてみる2">ベンチマークしてみる(2)&lt;/h3>
&lt;p>では、次にまたベンチマークとなります。コード自体は明らかに&lt;code>Arrays.toList()&lt;/code>の方が簡単だったのですが、MutableなListを作るためにはListを生成した後にさらにインスタンスを作成する必要があるということで、性能面で損する可能性もあるのかなという気がします。なので、以上で紹介した&lt;code>Arrays.asList()&lt;/code>と&lt;code>Stream&lt;/code>によるListのインスタンスの作成を、Immutable・Mutableという二つのケースに分けて検証してみました。以下がそのベンチマークのコードです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>@State&lt;span style="color:#ff79c6">(&lt;/span>Scope&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">Benchmark&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">class&lt;/span> &lt;span style="color:#50fa7b">StringSplitTest&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">private&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">static&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> String DELIMITER &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">private&lt;/span> String target&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Setup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">init&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> DecimalFormat format &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> DecimalFormat&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;0000000&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">this&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">target&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> IntStream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">rangeClosed&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>0&lt;span style="color:#ff79c6">,&lt;/span> 1000000&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">mapToObj&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> format&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">format&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>i&lt;span style="color:#ff79c6">)).&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">joining&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>DELIMITER&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Benchmark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">arraysAsListImmutable&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> Blackhole bh&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bh&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">consume&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Arrays&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">asList&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>target&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">split&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>DELIMITER&lt;span style="color:#ff79c6">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Benchmark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">arraysAsListMutable&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> Blackhole bh&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bh&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">consume&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#ff79c6">new&lt;/span> ArrayList&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;(&lt;/span>Arrays&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">asList&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>target&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">split&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>DELIMITER&lt;span style="color:#ff79c6">))));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Benchmark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">streamCollectImmutable&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> Blackhole bh&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bh&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">consume&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Arrays&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>target&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">split&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>DELIMITER&lt;span style="color:#ff79c6">)).&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toUnmodifiableList&lt;/span>&lt;span style="color:#ff79c6">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Benchmark
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">streamCollectMutable&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">final&lt;/span> Blackhole bh&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bh&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">consume&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Arrays&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>target&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">split&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>DELIMITER&lt;span style="color:#ff79c6">)).&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そして結果は以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-dos" data-lang="dos">Benchmark Mode Cnt Score Error Units
StringSplitTest.arraysAsListImmutable thrpt 25 8.316 ± 1.085 ops/s
StringSplitTest.arraysAsListMutable thrpt 25 8.133 ± 0.435 ops/s
StringSplitTest.streamCollectImmutable thrpt 25 6.086 ± 0.312 ops/s
StringSplitTest.streamCollectMutable thrpt 25 7.247 ± 0.262 ops/s
&lt;/code>&lt;/pre>&lt;p>ここでは、&lt;code>Arrays.asList()&lt;/code>の方が、性能が高い結果となっていますね。途中で何かしらの操作が必要な場合は&lt;code>Stream&lt;/code>の方が良いかと思いますが、そうではなく、単純に配列をListに変えたい場合はやはり&lt;code>Arrays.AsList()&lt;/code>を使った方がコードもより簡単で、性能面でも少し優勢ということがわかりました。なので、(いつもそうですが)何をしたいかによって適切なコードを選ぶべきかんと思います。&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>他にも、文字列の操作に関しては&lt;a class="link" href="https://www.baeldung.com/java-string-performance" target="_blank" rel="noopener"
>Baeldungさんの記事&lt;/a>がかなり良かったので、皆さんにもおすすめしたいと思います。最近は特に、アプリケーションでもっともよく扱うデータ型が文字列となっているので、文字列の操作に関してはなるべく性能と可読性という観点から良い書き方を取りたいものです。個人的には&lt;code>Stream&lt;/code>が大好きなので、なるべくなんでも&lt;code>Stream&lt;/code>で解決したいものですが…Javaだけでなく、プログラミング言語にとって「どんなケースでも正解」というものはないので。&lt;/p>
&lt;p>しかし、Javaに触れてからもう3年も過ぎていますが、今更こんなことを考えるということが恥ずかしい限りですね…次からは、もっと興味深い(そしてこのブログを読まれる方々にも役立つような)ネタを探したいと思います。うまくいくかは少しわからない状態なのですが…！&lt;/p></description></item><item><title>9からの新メソッドめぐり</title><link>https://retheviper.github.io/posts/java-new-methods-from-9-to-11/</link><pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate><guid>https://retheviper.github.io/posts/java-new-methods-from-9-to-11/</guid><description>&lt;img src="https://retheviper.github.io/images/java.jpg" alt="Featured image of post 9からの新メソッドめぐり" />&lt;p>仕事ではJava 11を扱うことが多いのですが、正直、自分の書いたコードを振り返ってみると、Java 9から新しく追加されたメソッドはあまり使ってないのが現実です。しかし、これら新しいメソッドたちは冗長さを隠してくれるシンタックスシュガーとして存在するだけでなく、性能や機能面でより優れているものもあるので、いますぐ使わないとしても目は通しておきたいものが多いなと思っています。&lt;/p>
&lt;p>2021年は次のLTSバージョンとなる17の登場が予告されている時点なので、今更な感はありますが、そろそろ私もSEになってから2年になるので、今回は今年、自分が書いたコードへの反省を含め、Java 9〜11まで新しく追加されたメソッドたちの中から、良さそうな(よく使えそうな)ものを選別してみました。そして今回のポストは、そう選別したメソッドの簡単な紹介となります。&lt;/p>
&lt;p>多くの場合、これらのメソッドを使える環境だとしたらJava 11を導入しているはずなのであまり意味はないのかもしれませんが、それぞれのメソッド名の右に、該当メソッドがどのバージョンから導入されたかを記入していますので参考にしてください。&lt;/p>
&lt;h2 id="stream">Stream&lt;/h2>
&lt;p>StreamこそJava 8のキモではないかと思います。そしてJava 9では、そのStreamの問題を色々と改善したり、より簡単に使えるようなメソッドを用意しています。なので、既存のforループにしか慣れてない人でも、簡単に入門できるようになったのではないかと思います。&lt;/p>
&lt;h3 id="iterate-9">Iterate (9)&lt;/h3>
&lt;p>&lt;code>iterate()&lt;/code>というメソッド名だけではすぐに意味がわからない場合もあると思いますが、このメソッドは伝統的なFor文と同じような構文でStreamでの処理を書くことができるようになります。つまり、「初期化・ループの継続条件・カウンタ変数の更新」を書くことで、Streaｍの要素数を決めることができるという意味です。例えば、以下のような書き方ができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 0~9までを出力
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">iterate&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>0&lt;span style="color:#ff79c6">,&lt;/span> i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 10&lt;span style="color:#ff79c6">,&lt;/span> i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> i &lt;span style="color:#ff79c6">+&lt;/span> 1&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">forEach&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">::&lt;/span>println&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これはつまり、以下のコードと同じ意味を持ちます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">for&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#8be9fd">int&lt;/span> i &lt;span style="color:#ff79c6">=&lt;/span> 0&lt;span style="color:#ff79c6">;&lt;/span> i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 10&lt;span style="color:#ff79c6">;&lt;/span> i&lt;span style="color:#ff79c6">++)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">println&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>i&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ただ、&lt;code>iterate()&lt;/code>で指定できる初期化の値が数字という制限はないので(&lt;code>T&lt;/code>です)、以下のようなこともできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Aで三角形を出力
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">iterate&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> s &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> s&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 10&lt;span style="color:#ff79c6">,&lt;/span> s &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> s &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">forEach&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">::&lt;/span>println&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、ループの継続条件を指定しないこともできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Aで三角形を出力
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">iterate&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> s &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> s &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">forEach&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">::&lt;/span>println&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>継続条件を指定しないと、無限ループになってしまうのでは？と思われそうですね。確かにそうですが、同じくJava 9でStreamの要素数の上限を指定できる新しいメソッドが追加されています。次に紹介するものがそれです。&lt;/p>
&lt;h3 id="takewhile-9">takeWhile (9)&lt;/h3>
&lt;p>以前、Streamの問題として「途中でやめられない」と書きましたが、Java 9から導入された&lt;code>takeWhile()&lt;/code>メソッドを使うと、途中で処理を終了するようなことができるようになりました。既存にあった&lt;code>limit()&lt;/code>の場合は、「指定された回数分」という限界がありましたが、こちらはPredicate型の条件を指定できるというところが違います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// AAAAAAAAAまで出力する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">iterate&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> s &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> s &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">takeWhile&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>s &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> s&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 10&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">forEach&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">::&lt;/span>println&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>なので、&lt;code>iterate()&lt;/code>の継続条件を書いてない場合には&lt;code>takeWhile()&lt;/code>を使ってどの条件で処理が終わるかを明示した方が良いですね。&lt;/p>
&lt;h3 id="dropwhile-9">dropWhile (9)&lt;/h3>
&lt;p>&lt;code>dropWhile()&lt;/code>は、その名からも推測できますが、&lt;code>takeWhile()&lt;/code>と真逆の機能をするメソッドです。このメソッドはStreamから与えられた条件と一致する要素を除いて、残りの要素を返却します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// AAAAAから出力する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">iterate&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> s &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> s&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">length&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 10&lt;span style="color:#ff79c6">,&lt;/span> s &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> s &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">dropWhile&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>s &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">!&lt;/span>s&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">contains&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;AAAAA&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">forEach&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">::&lt;/span>println&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ofnullable-9">ofNullable (9)&lt;/h3>
&lt;p>Java 1.8のStreamでは、Null要素を追加するためにはまずその要素がNullかどうかをチェックして、Nullの場合に&lt;code>Stream.empty()&lt;/code>を呼ぶような形にする必要がありました。いつものJavaのNullチェックですね。例えば以下のようなものです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 要素のNullチェックを含むStreamのCollect
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>keyList&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">flatMap&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>k &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object value &lt;span style="color:#ff79c6">=&lt;/span> map&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>k&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> value &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">?&lt;/span> Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>value&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">empty&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを、Java 9ではより簡単なコードで書くことができます。&lt;code>Optional&lt;/code>の&lt;code>ofNullable()&lt;/code>とあまり変わらない感覚ですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>keyList&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">flatMap&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>k &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">ofNullable&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>map&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>k&lt;span style="color:#ff79c6">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="collectors">Collectors&lt;/h2>
&lt;p>Streamの要素を集約するためのCollectorを提供する&lt;code>Collectors&lt;/code> APIですが、こちらの変化は主にシンタックスシュガーなものが多い印象です。主にStreamでしかできなかったことや、既存のCollectorsのみだとかなり長くなるコードを簡潔に書くことができるようになっています。&lt;/p>
&lt;h3 id="filtering-9">filtering (9)&lt;/h3>
&lt;p>&lt;code>Stream&lt;/code>の&lt;code>filter()&lt;/code>と同じ処理を、&lt;code>Collector&lt;/code>でもできるようになりました。どちらを使うかは好みの問題な気がしますが、&lt;code>Collector&lt;/code>そのものを共通化するなどの処理ができそうな気はしますね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 0~9までのリスト
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Integer&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> numbers &lt;span style="color:#ff79c6">=&lt;/span> Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">iterate&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>0&lt;span style="color:#ff79c6">,&lt;/span> i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 10&lt;span style="color:#ff79c6">,&lt;/span> i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> i &lt;span style="color:#ff79c6">+&lt;/span> 1&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Stream.filter()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>numbers&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">filter&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>e &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> e &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> 5&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span> &lt;span style="color:#6272a4">// 6, 7, 8, 9
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Collectors.filtering()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>numbers&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">filtering&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>e &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> e &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> 5&lt;span style="color:#ff79c6">,&lt;/span> Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">()));&lt;/span> &lt;span style="color:#6272a4">// 6, 7, 8, 9
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="flatmapping-9">flatMapping (9)&lt;/h3>
&lt;p>これもまた名前から推測できると思いますが、&lt;code>Collectors&lt;/code>でCollectionに変えるとき、要素のflatMappingをできるようにしてくれるようなものです。具体的には、以下のサンプルコードを参照してください。&lt;/p>
&lt;p>例えば、以下のようなクラスがあるとします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">class&lt;/span> &lt;span style="color:#50fa7b">Selling&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String clientName&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Product&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> products&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">public&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">class&lt;/span> &lt;span style="color:#50fa7b">Product&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String name&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> value&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そして、このSellingのリストを、「clientNameをKeyに、productsをValueにしたMapにしたい」場合はどうしたら良いでしょうか。例えば以下のような方法を考えられます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">,&lt;/span> List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Product&lt;span style="color:#ff79c6">&amp;gt;&amp;gt;&amp;gt;&lt;/span> result &lt;span style="color:#ff79c6">=&lt;/span> operations&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">groupingBy&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Selling&lt;span style="color:#ff79c6">::&lt;/span>getClientName&lt;span style="color:#ff79c6">,&lt;/span> Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">mapping&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Selling&lt;span style="color:#ff79c6">::&lt;/span>getProducts&lt;span style="color:#ff79c6">,&lt;/span> Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">())));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、問題は、&lt;code>List&amp;lt;Product&amp;gt;&lt;/code>をさらにListの中に入れてしまうことになります。これは本来の目的ともズレていて、無駄な処理が発生し、Valueを持ち出すときも不便なはずです。&lt;/p>
&lt;p>これを&lt;code>Map&amp;lt;String, List&amp;lt;Product&amp;gt;&amp;gt;&lt;/code>の形に変えるとしたら、以下のような方法が使えます。自作のCollectorを作るのですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">,&lt;/span> List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Product&lt;span style="color:#ff79c6">&amp;gt;&amp;gt;&lt;/span> result &lt;span style="color:#ff79c6">=&lt;/span> operations&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">groupingBy&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Selling&lt;span style="color:#ff79c6">::&lt;/span>getClientName&lt;span style="color:#ff79c6">,&lt;/span> Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">mapping&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Selling&lt;span style="color:#ff79c6">::&lt;/span>getProducts&lt;span style="color:#ff79c6">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Collector&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>ArrayList&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">new&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> List&lt;span style="color:#ff79c6">::&lt;/span>addAll&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>x&lt;span style="color:#ff79c6">,&lt;/span> y&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">addAll&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>y&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> x&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}))));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ただ、毎回このような自作Collectorを作るというのはあまり効率的ではない方法ではないかと思います。それに、自作のCollectorを普段から使ってない場合はコードだけみても少しわかりづらくもありますね。なので、ここは新しく追加された&lt;code>flatMapping()&lt;/code>で変えてみると以下のようになります。より簡潔ですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">,&lt;/span> List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Product&lt;span style="color:#ff79c6">&amp;gt;&amp;gt;&lt;/span> result &lt;span style="color:#ff79c6">=&lt;/span> operations&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">groupingBy&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Selling&lt;span style="color:#ff79c6">::&lt;/span>getClientName&lt;span style="color:#ff79c6">,&lt;/span> Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">flatMapping&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>selling &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> selling&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">getProducts&lt;/span>&lt;span style="color:#ff79c6">().&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">(),&lt;/span> Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">())));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="tounmodifiable-10">toUnmodifiable (10)&lt;/h3>
&lt;p>Java 10では&lt;code>Collectors&lt;/code>に以下の三つのメソッドが追加されています。&lt;/p>
&lt;ul>
&lt;li>&lt;code>toUnmodifiableList()&lt;/code>&lt;/li>
&lt;li>&lt;code>toUnmodifiableSet()&lt;/code>&lt;/li>
&lt;li>&lt;code>toUnmodifiableMap()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>これらのメソッドを使うと、既存の&lt;code>Collections&lt;/code>を呼ぶ必要なく、簡単に(もっと短いコードで)UnmodifiableなCollectionを作ることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Collections.unmodifiableList
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Integer&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> collectionsUnmodifiable &lt;span style="color:#ff79c6">=&lt;/span> Collections&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">unmodifiableList&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">iterate&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>0&lt;span style="color:#ff79c6">,&lt;/span> i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 10&lt;span style="color:#ff79c6">,&lt;/span> i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> i &lt;span style="color:#ff79c6">+&lt;/span> 1&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Collectors.toUnmodifiableList
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Integer&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> collectionsUnmodifiable &lt;span style="color:#ff79c6">=&lt;/span> Stream&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">iterate&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>0&lt;span style="color:#ff79c6">,&lt;/span> i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> i &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> 10&lt;span style="color:#ff79c6">,&lt;/span> i &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> i &lt;span style="color:#ff79c6">+&lt;/span> 1&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toUnmodifiableList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>引数は、既存の&lt;code>toList()&lt;/code>・&lt;code>toSet()&lt;/code>・&lt;code>toMap()&lt;/code>と同じなので(&lt;code>toMap()&lt;/code>だけ、KeyとValueのマッピングを指定する必要がありますね)、既存のメソッドと同じ感覚で使うことができます。&lt;/p>
&lt;h2 id="collections">Collections&lt;/h2>
&lt;p>Collections APIの新しいメソッドは、かなり現代的な書き方を可能にします。Kotlinのような言語がJavaの冗長さを回避するための工夫をしているのであれば、Java側に新しく追加されたメソッドはそれをさらにJavaに似合うような形で受け入れたような印象です。(というか、それしか方法はなかったかもしれませんが…)&lt;/p>
&lt;h3 id="factory-method-9">Factory Method (9)&lt;/h3>
&lt;p>Java 9では、&lt;a class="link" href="https://ja.wikipedia.org/wiki/Factory_Method_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener"
>ファクトリーメソッド&lt;/a>でCollectionの作成ができるようになりました。使い方としては、既存の&lt;code>Arrays.asList()&lt;/code>と似ているような感覚です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Listの作成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> list &lt;span style="color:#ff79c6">=&lt;/span> List&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;C&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Setの作成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Set&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>Integer&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> set &lt;span style="color:#ff79c6">=&lt;/span> Set&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>1&lt;span style="color:#ff79c6">,&lt;/span> 2&lt;span style="color:#ff79c6">,&lt;/span> 3&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mapの場合は、KeyとValueを順番に並ぶことでインスタンスを作成できますが、エントリーを定義することもできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// KeyとValueのセットで定義する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">,&lt;/span> String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> map &lt;span style="color:#ff79c6">=&lt;/span> Map&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;a&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;b&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;baz&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;c&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// エントリーを定義する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">,&lt;/span> String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> map &lt;span style="color:#ff79c6">=&lt;/span> Map&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">ofEntries&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">entry&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;a&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">entry&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;b&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">entry&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;baz&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;c&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これらのファクトリーメソッドで作成したCollectionの特徴は、最初からUnmodifiableなオブジェクトになるということです。なので、例えばアプリケーションの起動時にフィールドに定数をCollectionとして定義する、という場合に使えます。つまり、以下のような既存のコードを代替できるようなものです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// もっとも基本的な方式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Set&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> set &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> HashSet&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">add&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">add&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">add&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;baz&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set &lt;span style="color:#ff79c6">=&lt;/span> Collections&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">unmodifiableSet&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>set&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Double-brace initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>Set&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> set &lt;span style="color:#ff79c6">=&lt;/span> Collections&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">unmodifiableSet&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#ff79c6">new&lt;/span> HashSet&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;()&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;baz&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、このファクトリーメソッドで作ったCollectionは以下のような特徴を持ちますので、必要に応じて使うのが大事ですね。&lt;/p>
&lt;ul>
&lt;li>Immutable(Unmodifiable)になる&lt;/li>
&lt;li>Null要素を指定できない&lt;/li>
&lt;li>要素がSerializableだとCollectionもSerializableになる&lt;/li>
&lt;/ul>
&lt;h4 id="copyof-10">copyOf (10)&lt;/h4>
&lt;p>List, Set, Mapに&lt;code>copyOf()&lt;/code>というメソッドが追加されています。引数にそれぞれのCollectionを渡すと、Unmodifiableなコピーすることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// コピー元のリスト
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> original &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// コピーする
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>List&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> copy &lt;span style="color:#ff79c6">=&lt;/span> List&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">copyOf&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>original&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="optional">Optional&lt;/h2>
&lt;p>Optionalは積極的に使われていますか？私の場合は、Streamが返すもの以外で、自分でOptionalを使う場合はあまりないです。色々制約が多いので、複雑なNullチェックが必要な場合ではないと使いづらい気もしますね。ただ、9と10で追加されたメソッドでかなり便利に使えるものとなったので、たまには良いのかもしれません。&lt;/p>
&lt;h3 id="or-9">or (9)&lt;/h3>
&lt;p>Optionalの中身がNullの場合に実行されるメソッドです。既存の&lt;code>orElse()&lt;/code>や&lt;code>orElseGet()&lt;/code>と何が違うかというと、こちらはOptionalの中身ではなく、またのOptionalを返すということです。引数としてはSupplierをとります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String string &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Optional&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> optional &lt;span style="color:#ff79c6">=&lt;/span> Optional&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">ofNullable&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>string&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">println&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>optional&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">or&lt;/span>&lt;span style="color:#ff79c6">(()&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> Optional&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">)).&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span> &lt;span style="color:#6272a4">// &amp;#34;default&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="orelsethrow-10">orElseThrow (10)&lt;/h3>
&lt;p>Optionalの中身がNullの場合は例外を投げる分岐です。NullのOptionalはもともと&lt;code>NoSuchElementException&lt;/code>を投げますが、ビジネスロジックなどによりカスタマイズした例外を投げたい場合などはこちらを使えますね。引数としてはSupplierをとります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String string &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Optional&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> optional &lt;span style="color:#ff79c6">=&lt;/span> Optional&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">ofNullable&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>string&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String throwing &lt;span style="color:#ff79c6">=&lt;/span> optional&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">orElseThrow&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>RuntimeException&lt;span style="color:#ff79c6">::&lt;/span>&lt;span style="color:#ff79c6">new&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span> &lt;span style="color:#6272a4">// RuntimeException
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ifpresentorelse-9">ifPresentOrElse (9)&lt;/h3>
&lt;p>Optionalの中身がNullかどうかによって二つのアクションを指定して、分岐処理ができるようなメソッドです。第一引数としてはConsumerを指定することで中身がNullではない場合の処理を、第二引数としてはRunnableとして中身がNullだった場合の処理を書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Optional&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> hasValue &lt;span style="color:#ff79c6">=&lt;/span> Optional&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;proper value&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hasValue&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">ifPresentOrElse&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>v &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">println&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;the value is &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> v&lt;span style="color:#ff79c6">),&lt;/span> &lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">println&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;there is no value&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">));&lt;/span> &lt;span style="color:#6272a4">// the value is proper value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Optional&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> hasNoValue &lt;span style="color:#ff79c6">=&lt;/span> Optional&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">empty&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hasNoValue&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">ifPresentOrElse&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>v &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">println&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;the value is &amp;#34;&lt;/span> &lt;span style="color:#ff79c6">+&lt;/span> v&lt;span style="color:#ff79c6">),&lt;/span> &lt;span style="color:#ff79c6">()&lt;/span> &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> System&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">out&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">println&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;there is no value&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">));&lt;/span> &lt;span style="color:#6272a4">// there is no value
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stream-9">stream (9)&lt;/h3>
&lt;p>Optionalを要素が一つか、Null(&lt;code>Stream.empty()&lt;/code>)のSteamに変えるメソッドです。もともとStreamから要素を取得するときもOptionalになっていたので、このようなメソッドが追加されたのも当たり前といえば当たり前ですね。要素が多くて一つなのにStreamに変える意味があるかというと、他のStreamと結合ができたりもするので色々と活用できる余地はありそうです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Optional&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> optional &lt;span style="color:#ff79c6">=&lt;/span> Optional&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">of&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Stream&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> stream &lt;span style="color:#ff79c6">=&lt;/span> optional&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="string">String&lt;/h2>
&lt;p>String APIの場合は、主にJava 11でかなりの変化がありました。Webアプリケーションのみならず、最近のアプリケーションは文字列を扱う場合が多いので、このような変化はありがたいですね。&lt;/p>
&lt;h3 id="repeat-11">repeat (11)&lt;/h3>
&lt;p>指定した数値分、文字列を繰り返します。同じ文字列の単純な繰り返しだとすると、StringBuilderやStrinbBufferなしでも簡単に使えるこちらのメソッドの方が良いですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String a10 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">repeat&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>10&lt;span style="color:#ff79c6">);&lt;/span> &lt;span style="color:#6272a4">// &amp;#34;AAAAAAAAAA&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="strip-11">strip (11)&lt;/h3>
&lt;p>文字列の前後の空白を除外するために、今までは&lt;code>trim()&lt;/code>を使うケースが多かったのではと思いますが、Java 11からは&lt;code>strip()&lt;/code>が追加され、&lt;code>trim()&lt;/code>を代替できます。この二つが何が違うかというと、まずそれぞれのメソッドで定義している「空白」が違います。&lt;code>trim()&lt;/code>はUnicodeを考慮してなかったため、半角スペースのみの対応となっていましたが、&lt;code>strip()&lt;/code>はUnicodeで指定されたWhitespace全部を対象とするので、全角スペースや改行にも対応できます。どの文字がWhitespaceとして扱われるかは、&lt;code>Character.isWhitespace()&lt;/code>のメソッドが基準となるので、&lt;a class="link" href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Character.html#isWhitespace%28char%29" target="_blank" rel="noopener"
>そちらのJavaDoc&lt;/a>を参照してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String stripped &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;\n hello world \u2005&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">strip&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// &amp;#34;hello world&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、&lt;code>strip()&lt;/code>では前後の空白が全部削除されるのですが、文字列の前後を基準にして片方だけ削除したい場合は、前からだけを削除する&lt;code>stripLeading()&lt;/code>や後ろからだけを削除する&lt;code>stripTrailing()&lt;/code>も使えます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String stripLeading &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;\n hello world \u2005&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stripLeading&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// &amp;#34;hello world  &amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>String stripTrailing &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;\n hello world \u2005&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stripTrailing&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// &amp;#34;\n hello world&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>今までの説明だけでも十分&lt;code>strip()&lt;/code>を使う理由はあると思いますが、実はもう一つがあります。性能です。性能という面では&lt;code>strip()&lt;/code>の方が&lt;code>trim()&lt;/code>より&lt;a class="link" href="https://stackoverflow.com/questions/53640184/why-is-string-strip-5-times-faster-than-string-trim-for-blank-string-in-java" target="_blank" rel="noopener"
>5倍も早い&lt;/a>と言われているので、なるべく&lt;code>trim()&lt;/code>よりは&lt;code>strip()&lt;/code>を使うべきですね。&lt;/p>
&lt;h3 id="isblank-11">isBlank (11)&lt;/h3>
&lt;p>すでに&lt;code>isEmpty()&lt;/code>というメソッドがありますが、このメソッドと&lt;code>isBlank()&lt;/code>の違いは、&lt;code>trim()&lt;/code>と&lt;code>strip()&lt;/code>の関係と似ています。同じく、&lt;code>isEmpty()&lt;/code>と比べると&lt;code>isBlank()&lt;/code>の方がUnicodeに対応しているのでより多くのケースのWhitespaceに対応できて、性能でも優れています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">boolean&lt;/span> isEmpty &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;\n \u2005&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">isEmpty&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd">boolean&lt;/span> isBlank &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;\n \u2005&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">isBlank&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="lines-11">lines (11)&lt;/h3>
&lt;p>文字列に改行コード(&lt;code>\n&lt;/code>・&lt;code>\r&lt;/code>・&lt;code>\r\n&lt;/code>)を基準に分けた&lt;code>Stream&amp;lt;String&amp;gt;&lt;/code>を返却します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String multipleLine &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;first\nsecond\nthird&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">long&lt;/span> lines &lt;span style="color:#ff79c6">=&lt;/span> multipleLine&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">lines&lt;/span>&lt;span style="color:#ff79c6">().&lt;/span>&lt;span style="color:#50fa7b">filter&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>String&lt;span style="color:#ff79c6">::&lt;/span>isBlank&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">count&lt;/span>&lt;span style="color:#ff79c6">();&lt;/span> &lt;span style="color:#6272a4">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prediacte-not-11">Prediacte not (11)&lt;/h2>
&lt;p>LambdaやMethod Referenceで定義したPredicateの結果がFalseかどうかを判断するためのメソッドです。単純にtrueの否定になるだけなのですが、このメソッドの引数はPredicateなので、LambdaやMethod Referenceを使ってより単純に表現できるのがメリットといえますね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// 否定の条件式を使う場合
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>list&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">filter&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>m &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">!&lt;/span>m&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">isPrepared&lt;/span>&lt;span style="color:#ff79c6">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">// Predicate.not()を使う場合
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>list&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">stream&lt;/span>&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">filter&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Predicate&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">not&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Man&lt;span style="color:#ff79c6">::&lt;/span>isPrepared&lt;span style="color:#ff79c6">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">collect&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>Collectors&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">toList&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>2021年に次のLTSであるJava 17がリリースされると、今のJava 11を使う現場の場合は多くがJava 17に移行するのではないかと思います。12から16まで、さまざまなAPIや機能、JVMの改善などが含まれていて、すでに多くのブログなどで紹介されていますが、また既存のAPIにはどのような変化があるかまでは完全に把握していない状態です。なので、Java 17のリリースに合わせて、もう一度12〜17までの新しいメソッドの整理と紹介を行おうと思います。これだけでもかなり勉強になりますし、業務で使えそうなテクニックも増えていく感覚ですね。&lt;/p>
&lt;p>また、今年のポスティングはこれで終了となります。色々と大変な一年だったのですが、なんとか年末を迎えることができましたね。その間、このブログにも多くの方々がいらしてくださいました。まだジュニアレベルでしかない駆け出しエンジニアのブログなのであまり情報取集には役立たないかもしれませんが、少しでも私の書いたポストを読んでくださりありがとうございます。来年からは、より面白く、より良い情報を収取してブログに載せたいですね。&lt;/p>
&lt;p>では、また！&lt;/p></description></item></channel></rss>